<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dataselect_slot_no_save</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    dataslot_index       = 0;
    dataslot_zone        = 0;
    dataslot_character   = 1;
    dataslot_cpu         = 2;
    dataslot_combo       = 0;
    dataslot_arrow_frame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character combination.

    {
       if(keyboard_check_pressed(global.key_up) &amp;&amp; obj_dataselect_cursor.datacursor_slot_index == 0 &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
       {
          if(dataslot_combo == 8)
          {
             dataslot_combo  = 0;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
          else
          {
             dataslot_combo += 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }
       if(keyboard_check_pressed(global.key_down) &amp;&amp; obj_dataselect_cursor.datacursor_slot_index == 0 &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
       {
          if(dataslot_combo == 0)
          {
             dataslot_combo  = 8;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
          else
          {
             dataslot_combo -= 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }       
       if(dataslot_combo == 0)
       {
          dataslot_character = 1;
          dataslot_cpu       = 2;   
       }
       if(dataslot_combo == 1)
       {
          dataslot_character = 1;
          dataslot_cpu       = 3;   
       }
       if(dataslot_combo == 2)
       {
          dataslot_character = 2;
          dataslot_cpu       = 1;   
       }
       if(dataslot_combo == 3)
       {
          dataslot_character = 2;
          dataslot_cpu       = 3;   
       }
       if(dataslot_combo == 4)
       {
          dataslot_character = 3;
          dataslot_cpu       = 1;   
       }
       if(dataslot_combo == 5)
       {
          dataslot_character = 3;
          dataslot_cpu       = 2;   
       }
       if(dataslot_combo == 6)
       {
          dataslot_character = 1;
          dataslot_cpu       = 0;   
       }
       if(dataslot_combo == 7)
       {
          dataslot_character = 2;
          dataslot_cpu       = 0;   
       }
       if(dataslot_combo == 8)
       {
          dataslot_character = 3;
          dataslot_cpu       = 0;   
      }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selecting Slot.

 // Check if cursor slot id is equal to this slot's id and that the cursor is not moving.
    if(obj_dataselect_cursor.datacursor_slot_index == dataslot_index &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
    {
       // Make sure to only run if robotnik is deactivated.
          if(obj_dataselect_robotnik.active == false)
          {
             // If we press Action or Start, start a new game, resume it or go to the level select.
                if(keyboard_check_pressed(global.key_action) || keyboard_check_pressed(global.key_enter))
                {
                   // New game:
                      if(dataslot_zone == 0)
                      {
                         if(instance_exists(obj_fade_newgame) == false)
                         {
                            // Set the first zone of the game. You can tweak it to change depending on the main character!
                               if(dataslot_character == 1)
                               {
                                  global.first_zone = rm_playground;
                               }
                               if(dataslot_character == 2)
                               {
                                  global.first_zone = rm_playground;
                               }        
                               if(dataslot_character = 3)
                               {
                                  global.first_zone = rm_playground;
                               }               
                               
                            // Set global. variables.
                               global.player_id        = dataslot_character;
                               global.cpu              = dataslot_cpu;
                               global.player_lives     = 3;
                               global.player_continues = 0;
                               global.player_emeralds  = 0;
                               global.game_completed   = 0;
                               
                            // Create the fade out.                                       
                               instance_create(0, 0, obj_fade_newgame);
                               obj_dataselect_cursor.datacursor_lock = true;
                         }
                      }
                }
          }
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw slot.

 // Draw main sprite.
    draw_sprite(sprite_index, -1, x, y);
        
 // Draw Characters.
    if(dataslot_cpu != 0)
    {
       draw_sprite_ext(spr_dataselect_characters, dataslot_cpu, (x+sprite_get_width(sprite_index)/2)+8, y+sprite_get_height(sprite_index)-52, -1, 1, 0, c_white, 1);       
    }     
    if(dataslot_character != 0)
    {
       if(dataslot_cpu == 0)
       {
          draw_sprite_ext(spr_dataselect_characters, dataslot_character, (x+sprite_get_width(sprite_index)/2)-2, y+sprite_get_height(sprite_index)-52, 1, 1, 0, c_white, 1);  
       }
       else
       {
          draw_sprite_ext(spr_dataselect_characters, dataslot_character, (x+sprite_get_width(sprite_index)/2)-12, y+sprite_get_height(sprite_index)-52, 1, 1, 0, c_white, 1);         
       }
    }
    
 // Draw arrows.
    if(obj_dataselect_cursor.datacursor_slot_index == 0 &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
    {
      dataslot_arrow_frame += 0.15;
      draw_sprite(spr_dataselect_arrow, floor(dataslot_arrow_frame), x+sprite_get_width(sprite_index)/2, y+sprite_get_height(sprite_index)/2 - 6)
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
