<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize audio.

 // Controller variables.
    zone_bgm             = -1;
    zone_bgm_backup      = -1;
    zone_my_bgm_volume   = global.bgm_volume;
    zone_my_sfx_volume   = global.sfx_volume;
    zone_results         = false;
    fadeout_flag         = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop music / sounds.
  
 // Exit when the game over is on screen.
    if(instance_exists(obj_game_over))
    {  
       global.bgm_volume = zone_my_bgm_volume;
       global.sfx_volume = zone_my_sfx_volume;  
       exit;
    }
    
 // Exit when the results are on screen.
    if(instance_exists(obj_results) &amp;&amp; zone_results == false)
    {
       zone_results = true;    
       audio_stop_all();
       global.bgm_volume = zone_my_bgm_volume;
       global.sfx_volume = zone_my_sfx_volume;
       aud_play_sound(jingle_scoring, global.bgm_volume, 1, 0, 0);       
       exit;
    }
    if(zone_results == true)
    {
       exit;
    }

 // Lower the music volume if the life jingle is playing.
    if(instance_exists(obj_player))
    {
       if(fadeout_flag == 0)
       {
          if(audio_is_playing(player_life) || audio_is_playing(general_emerald))
          {
             global.bgm_volume = 0.00;
             global.sfx_volume = 0.00;
          }
          else
          {  
             if(global.bgm_volume &lt; zone_my_bgm_volume)
             {
                global.bgm_volume += 0.01;
             }  
             if(global.sfx_volume &lt; zone_my_sfx_volume)
             {
                global.sfx_volume += 0.01;
             }        
          }   
       }
       else // This is used when the player has died.
       {
         if(global.bgm_volume != 0.00)
          {
             global.bgm_volume -= 0.01;
          }
          else global.bgm_volume = 0.00;
          if(global.sfx_volume != 0.00)
          {
             global.sfx_volume -= 0.01;
          }     
          else global.sfx_volume = 0.00;               
       }
    }

 // Stop bgm when drowning.
    if(audio_is_playing(jingle_drown))
    {
       audio_stop_sound(zone_bgm);
    }
    else
    {
       if(audio_is_playing(zone_bgm) == false &amp;&amp; zone_bgm != -1)
       {
          aud_play_music(zone_bgm, global.bgm_volume, 1);
       }
    }
    
 // Set the volume of the currently playing zone music and invincibility jingle.
    if(audio_is_playing(jingle_invincibility) == false)
    {    
       if(audio_is_playing(zone_bgm) &amp;&amp; zone_bgm != -1)
       {
          audio_sound_gain(zone_bgm, global.bgm_volume, 0);  
       }
    }
    else
    {
       if(audio_is_playing(zone_bgm) &amp;&amp; zone_bgm != -1)
       {    
          audio_sound_gain(zone_bgm, 0.00, 0);   
       }  
    }
    if(audio_is_playing(jingle_drown) == false)
    {    
       if(audio_is_playing(jingle_invincibility))
       {
          audio_sound_gain(jingle_invincibility, global.bgm_volume, 0);
       }  
    }
    else
    {
       if(audio_is_playing(jingle_invincibility))
       {    
          audio_sound_gain(jingle_invincibility, 0.00, 0);      
       }         
    }
    
 // Some sound effects need to have their volume modified too.
    if(audio_is_playing(player_flying))
    {   
       audio_sound_gain(player_flying, global.sfx_volume, 0);
    }
    if(audio_is_playing(player_flying_drop))
    {       
       audio_sound_gain(player_flying_drop, global.sfx_volume, 0);
    }    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop all playing sounds.

    audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play stage music.
 
 // First, stop every single sound.
    audio_stop_all();
    
 // Revert the fadeout flag if it's enabled.
    fadeout_flag = false;
    zone_results = false;
    
 // Set the volumes.
    global.bgm_volume = zone_my_bgm_volume;
    global.sfx_volume = zone_my_sfx_volume;   
    
 // Then play the stage music.
    switch(room)
    {
           case rm_title:
           {
                zone_bgm = -1;
                aud_play_sound(jingle_title, global.bgm_volume, 1, 0, 0);
                break;
           }        
           case rm_continue:
           {
                zone_bgm = -1;
                aud_play_sound(jingle_continue, global.bgm_volume, 1, 0, 0);
                break;
           }     
           case rm_data_select:
           {
                zone_bgm = music_dataselect;
                if(audio_is_playing(zone_bgm) == false)
                {
                   aud_play_music(zone_bgm, global.bgm_volume, 1);
                }
                break;
           }   
           case rm_level_select:
           {
                zone_bgm = music_levelselect;
                if(audio_is_playing(zone_bgm) == false)
                {
                   aud_play_music(zone_bgm, global.bgm_volume, 1);
                }
                break;
           }                                     
           case rm_options:
           {
                zone_bgm = music_options;
                if(audio_is_playing(zone_bgm) == false)
                {
                   aud_play_music(zone_bgm, global.bgm_volume, 1);
                }
                break;
           }    
           case rm_playground:
           {
                zone_bgm = music_test;
                if(audio_is_playing(zone_bgm) == false)
                {
                   aud_play_music(zone_bgm, global.bgm_volume, 1);
                }
                break;
           }
           case rm_playground_2:
           {
                zone_bgm = music_test;
                if(audio_is_playing(zone_bgm) == false)
                {
                   aud_play_music(zone_bgm, global.bgm_volume, 1.15);
                }
                break;
           }
           default:
           {    
              zone_bgm        = -1;
              zone_bgm_backup = -1;
              break;
           }
    }
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
