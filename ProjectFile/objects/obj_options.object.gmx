<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
  
    option_max          = 6;    // Number Of Options Available.
    option_selected     = option_max - 1;      // Option we're currently highlighting.
    option_description  = "";     // Description of a highlighted option.
    option_delay        = 30;
    option_bind         = 0;
    bind_check          = 0;
    bind_status         = 1;
    bind_key            = "";
    option_ended        = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center window.
   
    window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard rebind.

    if(option_bind == 1)
    {
       if(bind_status == 8)
       {
          option_bind  = 0;
          bind_status  = 1;
          option_delay = 30;
       }       
       switch(bind_status)
       {
              case 1: { bind_key = "UP";      break; }
              case 2: { bind_key = "DOWN";    break; }
              case 3: { bind_key = "LEFT";    break; }
              case 4: { bind_key = "RIGHT";   break; }
              case 5: { bind_key = "ACTION";  break; }
              case 6: { bind_key = "SPECIAL"; break; }
              case 7: { bind_key = "ENTER";   break; }
       }       
       if(option_delay == 0)
       {
          bind_check = keyboard_key;
       }
       if(bind_check != 0 &amp;&amp; option_delay == 0)
       {
           switch(bind_status)
           {
                  case 1: { global.key_up      = bind_check; option_delay = 30; bind_status = 2; keyboard_clear(vk_anykey);  break; }
                  case 2: { global.key_down    = bind_check; option_delay = 30; bind_status = 3; keyboard_clear(vk_anykey);  break; }               
                  case 3: { global.key_left    = bind_check; option_delay = 30; bind_status = 4; keyboard_clear(vk_anykey);  break; }        
                  case 4: { global.key_right   = bind_check; option_delay = 30; bind_status = 5; keyboard_clear(vk_anykey);  break; }         
                  case 5: { global.key_action  = bind_check; option_delay = 30; bind_status = 6; keyboard_clear(vk_anykey);  break; }
                  case 6: { global.key_special = bind_check; option_delay = 30; bind_status = 7; keyboard_clear(vk_anykey);  break; }    
                  case 7: { global.key_enter   = bind_check; option_delay = 30; bind_status = 8; keyboard_clear(vk_anykey);  break; }                                                                                      
           }
       }       
    }
    
 // Delay.
    if(option_delay != 0)
    {
       option_delay -= 1;
    }
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad rebind.

    if(option_bind == 2)
    {
       if(bind_status == 4)
       {
          option_bind  = 0;
          bind_status  = 1;
          option_delay = 30;
       }       
       switch(bind_status)
       {
              case 1: { bind_key = "ACTION";   break; }
              case 2: { bind_key = "SPECIAL";  break; }
              case 3: { bind_key = "ENTER";    break; }
       }       
       if(option_delay == 0)
       {
          bind_check = gamepad_check();
       }
       if(bind_check != 0 &amp;&amp; option_delay == 0)
       {
           switch(bind_status)
           {
                  case 1: { global.gmp_action  = bind_check; option_delay = 30; bind_status = 2; break; }
                  case 2: { global.gmp_special = bind_check; option_delay = 30; bind_status = 3; break; }               
                  case 3: { global.gmp_enter   = bind_check; option_delay = 30; bind_status = 4; break; }                                                                                        
           }
       }       
    }
    
 // Delay.
    if(option_delay != 0)
    {
       option_delay -= 1;
    }
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw option pages.

    draw_set_font(global.main_font);
    draw_set_halign(fa_center);
    draw_set_color(c_yellow)
    draw_text(global.screen_width/2, 16, "- SNW DEBUG SETTINGS -#----------------")
    draw_text(global.screen_width/2, global.screen_height-32, "----------------#"+string(option_description));
    draw_set_color(c_white);
    if(option_bind == 0)
    {
     
       // Change option.
          if(keyboard_check_pressed(global.key_down) &amp;&amp; option_ended != 1)
          {  
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
             if(option_selected &lt; option_max)
             {
                option_selected += 1;
             }
             else
             {
                option_selected = 0;
             }
          } 
          if(keyboard_check_pressed(global.key_up) &amp;&amp; option_ended != 1)
          {  
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);          
             if(option_selected &gt; 0)
             {
                option_selected -= 1;
             }
             else
             {
                option_selected = option_max;
             }
          } 
           
       // Draw options.
          if(option_selected == 0)
          {
             option_description = "- Change the Display Resolution -"
             draw_set_color(c_yellow);
             if(keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
                if(global.screen_scale &gt; 1)
                {
                   global.screen_scale -= 1;
                }
                else
                {
                   global.screen_scale = 4;
                }
                // Set screen resolution.
                   if(global.screen_scale != 4)
                   {
                   if(window_get_fullscreen() == true)
                   {
                      window_set_fullscreen(false);
                   }
                   window_set_size(global.screen_width*global.screen_scale, global.screen_height*global.screen_scale);
                   window_center();             
                   alarm[0] = 1;
                   }
                   else
                   { 
                      window_set_fullscreen(true);
                      window_set_size(global.screen_width, global.screen_height);   
                      window_center();      
                      alarm[0] = 1;                
                   }
             }
             if(keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);             
                if(global.screen_scale &lt; 4)
                {
                   global.screen_scale += 1;
                }
                else
                {
                   global.screen_scale = 1;
                }
                // Set screen resolution.
                   if(global.screen_scale != 4)
                   {
                   if(window_get_fullscreen() == true)
                   {
                      window_set_fullscreen(false);
                   }
                   window_set_size(global.screen_width*global.screen_scale, global.screen_height*global.screen_scale);
                   window_center(); 
                   alarm[0] = 1            
                   }
                   else
                   { 
                      window_set_fullscreen(true);
                      window_set_size(global.screen_width, global.screen_height);   
                      window_center();      
                      alarm[0] = 1;                
                   }
                }             
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, 48, "DISPLAY RESOLUTION - ["+string(global.screen_width*global.screen_scale)+"x"+string(global.screen_height*global.screen_scale)+"]")
       
          
          // ============= BGM Volume
          if(option_selected == 1)
          {
             option_description = "- Change the Volume for Background Music -"
             draw_set_color(c_yellow);
             if(keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);             
                global.bgm_volume -= 0.01;
                if(global.bgm_volume &lt; 0.01)
                {
                   global.bgm_volume = 0;
                }
             }
             if(keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);             
                global.bgm_volume += 0.01;
                if(global.bgm_volume &gt;= 1)
                {
                   global.bgm_volume = 1;
                }                
             }             
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, 64, "BGM VOLUME - "+string( max(floor(global.bgm_volume*100),min(0))) + "%")      
       
          // ============= SFX Volume
          if(option_selected == 2)
          {
             option_description = "- Change the Volume for Sound Effects -"
             draw_set_color(c_yellow);
             if(keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);             
                global.sfx_volume -= 0.01;
                if(global.sfx_volume &lt; 0.01)
                {
                   global.sfx_volume = 0;
                }
             }
             if(keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
             {
                aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);             
                global.sfx_volume += 0.01;
                if(global.sfx_volume &gt;= 1)
                {
                   global.sfx_volume = 1;
                }                
             }              
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, 80, "SFX VOLUME - "+string( max(floor(global.sfx_volume*100),min(0))) + "%") 
       
          // ============= KEYBOARD KEYS
          if(option_selected == 3)
          {
             option_description = "- Change the Keyboard bindings -"
             draw_set_color(c_yellow);
             if(keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
             {
                option_delay = 30;
                option_bind  = 1;
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, 96, "KEYBOARD BINDINGS") 
       
          // ============= GAMEPAD KEYS          
          if(option_selected == 4)
          {
             option_description = "- Change the Gamepad bindings -"
             if(obj_gamepad_controller.gmp_check == 1)
             {
                draw_set_color(c_yellow);
                if(keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
                {
                   option_delay = 30;
                   option_bind  = 2;
                }            
             }
             else
             {
                draw_set_color(c_red);    
                if(keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
                {
                   aud_play_sound(general_error, global.sfx_volume, 1, 0, 0);   
                }            
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, 112, "GAMEPAD BINDINGS") 

          // ============= CHANGE CHARACTERS      
          if(option_selected == 5)
          {
             option_description = "- Current Character: " + scr_return_character_name(global.player_id) + " -";
             draw_set_color(c_yellow);
             
             if(option_ended != 1)
             {
             
                 if keyboard_check_pressed(vk_left) {
                     global.player_id -= 1;
                     aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);   
                 }
    
                 if keyboard_check_pressed(vk_right) {
                     global.player_id += 1;
                     aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);   
                 }             
                          
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, 128, "&lt; MAIN CHARACTER &gt;")   
                           
          // ============= START GAME         
          if(option_selected == 6)
          {
             option_description = "- Play the Test Area -"
             draw_set_color(c_yellow);
             if(keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
             {
                if(instance_exists(obj_fade_to_value) == false)
                {                   
                   option_ended = 1;
                   with(instance_create(0, 0, obj_fade_to_value))
                   {
                        value = rm_playground;
                   }
                   
                   aud_play_sound(general_checkpoint, global.sfx_volume, 1, 0, 0);             
                   save_global_create();
                }
             }
          }
          else
          {
             draw_set_color(c_white);
          } 
          draw_text(global.screen_width/2, global.screen_height-48, "START GAME")                  
        
    }
    
    /// Bind Keys.
    if(option_bind &gt; 0)
    {
          draw_text(global.screen_width/2, global.screen_height/2, "PRESS ANY KEY FOR: "+string(bind_key))                       
    }
    draw_set_halign(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
