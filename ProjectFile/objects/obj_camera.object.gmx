<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera variables.
    
 // Set view:
    view_object [0] = id;
    view_hborder[0] = 480/2;
    view_vborder[0] = 270/2;
    
 // Horizontal Borders:
    border_left  = x-8;
    border_right = x+8;
    
 // Horizontal limits:
    limit_left  = 0;
    limit_right = room_width;
    
 // Vertical Borders:
    border_top    = y-32;
    border_bottom = y+32;
    
 // Vertical limits:
    limit_top    = 0;
    limit_bottom = room_height;
    
 // Camera handle:
    cam_handle = obj_player;
    cam_speed  = 6.5;
    
 // Camera position.
    cam_x       = x;
    cam_y       = y;
    cam_x_shift = 0;
    cam_y_shift = 0;
    cam_lag     = 0;
    cam_limit   = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera shifting.

    if(cam_handle == obj_player)
    {
       // Looking up:
          if(cam_handle.state == STATE_LOOKUP &amp;&amp; cam_handle.timer_up &gt;= 120)
          {
             cam_y_shift = max(-104, cam_y_shift-2);
          }
          else
       // Looking down:
          if(cam_handle.state == STATE_CROUCH &amp;&amp; cam_handle.timer_down &gt;= 120)
          {
             cam_y_shift = min(104, cam_y_shift+2);
          }       
          else // Center camera.
          {
             cam_y_shift = max(0, abs(cam_y_shift)-2)*sign(cam_y_shift);
          }   
    }

    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera movement.

 // Update borders.
    border_left   = (cam_x-8) - (cam_lag);
    border_right  = (cam_x+8) + (cam_lag);
    border_top    = (cam_y-32);
    border_bottom = (cam_y+32);
    
 // Set temp view center variables:
    var centerX, centerY;
    centerX = (view_wview[0])/2;
    centerY = (view_hview[0])/2;
    
 // Player camera handling:
    if(cam_handle == obj_player)
    {
       // Move camera to the right.
          if(cam_handle.x &gt; border_right &amp;&amp; cam_handle.x &lt;= (limit_right-centerX))
          {
             cam_x += min(abs(cam_handle.x-border_right), 16);
          }
       // Move camera to the left.
          if(cam_handle.x &lt; border_left &amp;&amp; cam_handle.x &gt;= (limit_top-centerX))
          { 
             cam_x -= min(abs(cam_handle.x-border_left), 16);
          }       
          
       // Move camera up or down while in the air.
         if(cam_handle.ground == false &amp;&amp; cam_handle.state != STATE_DEATH)
         {
            if(cam_handle.y &gt; border_bottom &amp;&amp; cam_handle.y &lt; limit_bottom-centerY)
            {
               cam_y += cam_handle.y-border_bottom;
            }
            if(cam_handle.y &lt; border_top &amp;&amp; cam_handle.y &gt; limit_top+centerY)
            {
              cam_y -= border_top-cam_handle.y;
            }
         }
          
       // Move camera up or down while grounde.
         if(cam_handle.ground == true &amp;&amp; cam_handle.state != STATE_DEATH)
         {
            if(cam_handle.y != cam_y)
            {
               if(abs(cam_handle.y-cam_handle.yprevious) &lt;= 6) 
               {
                  if(cam_handle.y &gt; cam_y &amp;&amp; cam_handle.y &lt; limit_bottom-centerY)
                  {
                      cam_y += min(abs(cam_handle.y-cam_y), 6);
                  }    
                  if(cam_handle.y &lt; cam_y &amp;&amp; cam_handle.y &gt; limit_top+centerY)
                  {
                     cam_y -= min(abs(cam_y-cam_handle.y), 6);
                  }
               }
               if(abs(cam_handle.y-cam_handle.yprevious) &gt; 6)
               {
                  if(cam_handle.y &gt; cam_y &amp;&amp; cam_handle.y &lt; limit_bottom-centerY)
                  {
                     cam_y += min(abs(cam_handle.y-cam_y), 16);
                  }                              
                  if(cam_handle.y &lt; cam_y &amp;&amp; cam_handle.y &gt; 0+centerY)
                  {
                     cam_y -= min(abs(cam_y-cam_handle.y), 16);
                  }
               } 
            }
         }                    
    }
    
 // Target camera handling:    
    if(cam_handle != noone &amp;&amp; cam_handle != obj_player)
    {
       if(cam_handle.x != cam_x)
       {
          if(cam_handle.x &gt; cam_x &amp;&amp; cam_x &lt;= limit_right-centerX)
          {
             cam_x += min(abs(cam_handle.x-cam_x), cam_speed);
          }
          if(cam_handle.x &lt; cam_x &amp;&amp; cam_x &gt;= limit_left-centerX)
          {
             cam_x -= min(abs(cam_x-cam_handle.x), cam_speed);
          }
       }
       if(cam_handle.y != cam_y)
       {
          if(cam_handle.y &gt; cam_y &amp;&amp; cam_y &lt; limit_bottom-centerY)
          {
             cam_y += min(abs(cam_handle.y-cam_y), cam_speed);
          }
          if(cam_handle.y &lt; cam_y &amp;&amp; cam_y &gt; limit_top-centerY)
          {
             cam_y -= min(abs(cam_y-cam_handle.y), cam_speed);
          }
       }       
    }
  
 // Set position, floor the camera values to prevent jittering.
    x = floor(cam_x + cam_x_shift);
    y = floor(cam_y + cam_y_shift);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera lag.
 // Used to stop the camera from moving, one example is when releasing a spindash or using a fire shield.

    if(cam_lag)
    {
       cam_lag -= 3;
    }
    if(cam_lag &lt; 0)
    {
       cam_lag = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
