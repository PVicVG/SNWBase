<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999997</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    player_index = obj_player.player_index;
    //alarm[0]     = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global timers.

 // Game time:
    if(global.game_paused == false)
    { 
       if(global.do_time &gt; 0)
       {
          if(global.game_time &lt; 600000 &amp;&amp; global.time_over == 1)
          {
             global.game_time += 1000/60;
          }
          else if(global.game_time &gt;= 600000 &amp;&amp; global.time_over == 1)
          {
             if(instance_exists(obj_player))
             {
                with(obj_player)
                {
                     state = STATE_DEATH;
                }
             }
          }
          else global.game_time += 1000/60;
       }
    }
    
 // Object timer:
    if(global.game_paused == false)
    {
       global.object_time += 1000/60;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gain life with 100 rings.

    if(global.player_rings_100 &lt; 100)
    {
       if(global.player_rings &gt;= (global.player_rings_100 * 100))
       {
          // Gain life:
             global.player_rings_100 += 1;
             global.player_lives     += 1;

          // Play life jingle.
             global.sfx_volume = obj_audio.zone_my_bgm_volume;
             aud_play_sound(player_life, global.sfx_volume, 1, 0, 0);             
       }
       
       // When hit, reset everything. 
          if(global.player_rings == 0 &amp;&amp; global.player_rings_100 != 1)
          {
             global.player_rings_100 = 1;
          }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init.    

 // Create title card:
    instance_create(0, 0, obj_title_card);
    instance_create(0, 0, obj_instance_region);
    instance_create(0, 0, obj_pause);
    
 // Set level variables:
    global.player_rings = 0;
    global.do_time      = 0;
    global.game_time    = 0;
    global.object_time  = 0;

 // HUD Pieces:
    time_visibility = 1;
    ring_visibility = 1;

 // Save progress. 
    if(global.save_selected != 0)
    {
       save_create(global.save_selected);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD.

 // Exit if paused.
    if(global.game_paused == true) exit;

 // Draw HUD Parts:
    draw_sprite(spr_hud, 0, view_xview+16, view_yview+9);
    if(time_visibility)
    {
        draw_sprite(spr_hud, 1, view_xview+16, view_yview+25);
        if(global.game_time &lt; 600000)
        { 
           draw_sprite(spr_time_seperator, 0, view_xview+66, view_yview+25);
        }
        else draw_sprite(spr_time_seperator, 0, view_xview+74, view_yview+25);
    }
    if(ring_visibility)
    {
       draw_sprite(spr_hud, 2, view_xview+16, view_yview+41)
    }
    
 // HUD Parts visibility.
    if(((global.game_time div 8) mod 2 &amp;&amp; global.game_time &gt; 540000) || global.do_time == 0 || global.game_time &lt;= 540000 || global.game_time &gt;= 600000)
    {
        time_visibility = 1;
    }
    else time_visibility = 0;

    
    if((global.game_time div 8) mod 2 &amp;&amp; global.player_rings == 0 || global.do_time == 0 || global.player_rings &gt; 0 || global.game_time &gt;= 600000)
    {
        ring_visibility = 1;
    }
    else ring_visibility = 0;

    
 // Set font.
    draw_set_font(global.hud_font);
    draw_set_color(c_white);

    
 // Score Text:
    draw_set_halign(fa_right);
    draw_text(view_xview+111, view_yview+9, global.player_score);
    
 // Time:
    draw_set_halign(fa_left);   
    if(time_visibility)
    {
       draw_text(view_xview+55, view_yview+25, string(floor(global.game_time/60000))+" "+string_place_number(floor(global.game_time/1000) mod 60, 2, 0));
    }

 // Rings:
    draw_set_halign(fa_right);
    draw_text(view_xview+87, view_yview+41, global.player_rings);
    draw_set_halign(-1);
    

 // Lives:
    draw_set_halign(fa_right);
    draw_set_font(global.lives_font);
    draw_sprite(spr_hud_lives, player_index-1, view_xview+16, view_yview+view_hview-24)
    draw_text(view_xview+64, view_yview+view_hview-15, global.player_lives);
    draw_set_font(global.hud_font);
    draw_set_halign(-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
