<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy nodes.

    for(i=0; i&lt;num_logs; i+=1)
    {
        if(instance_exists(logs[i]))
        {
           with(logs[i])
           {
                instance_destroy();
           }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bridge logic.

// ---- Variable declaration ---------------------------------------------------------------------------
    var player_count, player_handle, tension_point, distance_from_center, left_gradient, right_gradient, left, right;
    var current_height;

// ---- Routine ----------------------------------------------------------------------------------------

    // Set all logs heights to 0
    for (i=0; i&lt;num_logs; i+=1) heights[i] = 0;
    
    // Find out the logs height depending on the player objects
    if (instance_exists(par_player))
    {
        // Get number of player instances and run through them all
        player_count = instance_number(par_player);
        for (i=0; i&lt;player_count; i+=1)
        {
            // Grab object instance handle and check if it's on the bridge
            player_handle = instance_find(par_player, i);
            
            if (player_handle == noone) continue;

            if (!collision_rectangle(x, y-2, x+bridge_width, y+max_tension, player_handle, true, true)
             || !player_handle.ground) continue;
            
            // Find tension point and calculate left and right and their gradients
            tension_point  = min(max(floor((player_handle.x - x)/16),0),num_logs-1);
            left_gradient  = safe_division(pi*0.5, tension_point);
            right_gradient = safe_division(pi*0.5, num_logs-tension_point);
            left           = 0;
            right          = pi;
            
            // Calculate distance from center
            distance_from_center = max_tension * (1-(abs(floor(player_handle.x-x-half_width)/half_width)));
            
            // Reposition all bridge logs
            for (j=0; j&lt;=tension_point; j+=1)
            {
                current_height = sin(left)*distance_from_center;
                if (heights[j] &lt; current_height) heights[j] = current_height;
                
                left           += left_gradient;
            }
            for (j=num_logs-1; j&gt;tension_point; j-=1)
            {
                current_height = sin(right)*distance_from_center;
                if (heights[j] &lt; current_height) heights[j] = current_height;

                right          -= right_gradient;
            }
        }
    }

    // Now, change bridge's height
    for(i=0; i&lt;num_logs; i+=1) 
    {
       if(instance_exists(logs[i]))
       {
          logs[i].y = interpolate_values(logs[i].y, y+heights[i], 0.2);
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
