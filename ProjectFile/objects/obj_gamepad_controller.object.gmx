<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
     gmp_check    = joystick_exists(1); // Check if a controller is connected.
     gmp_cup      = false;
     gmp_cdown    = false;
     gmp_cleft    = false;
     gmp_cright   = false;
     gmp_caction  = false;
     gmp_cspecial = false;
     gmp_center   = false;
     alarm[0]     = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if a gamepad is connected. We do this every so often in case we plug one in mid-game.

    gmp_check = joystick_exists(1); 
    alarm[0]  = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Simulate the keyboard using our gamepad.

    if(gmp_check)
    {
    
       // Up:
          if(joystick_pov(1) == 0 || joystick_direction(1) == 104)
          {
             gmp_cup = true;
             keyboard_key_press(global.key_up);
          }
          else
          {
             if(gmp_cup == true)
             {
                gmp_cup = false;
                keyboard_key_release(global.key_up);
             }
          }
    
       // Down:
          if(joystick_pov(1) == 180 || joystick_direction(1) == 98)
          {
             gmp_cdown = true;
             keyboard_key_press(global.key_down);
          }
          else
          {
             if(gmp_cdown == true)
             {
                gmp_cdown = false;
                keyboard_key_release(global.key_down);
             }
          }
    
       // Left:
          if(joystick_pov(1) == 270 || joystick_direction(1) == 100)
          {
             gmp_cleft = true;
             keyboard_key_press(global.key_left);
          }
          else
          {
             if(gmp_cleft == true)
             {
                gmp_cleft = false;
                keyboard_key_release(global.key_left);
             }
          }            
    
       // Right:
          if(joystick_pov(1) == 90 || joystick_direction(1) == 102)
          {
             gmp_cright = true;
             keyboard_key_press(global.key_right);
          }
          else
          {
             if(gmp_cright == true)
             {
                gmp_cright = false;
                keyboard_key_release(global.key_right);
             }
          }          
    
       // Action:
          if(joystick_check_button(1, global.gmp_action))
          {
             gmp_caction = true;
             keyboard_key_press(global.key_action);
          }
          else
          {
             if(gmp_caction == true)
             {
                gmp_caction = false;
                keyboard_key_release(global.key_action);
             }
          }                    
    
       // Special:
          if(joystick_check_button(1, global.gmp_special))
          {
             gmp_cspecial = true;
             keyboard_key_press(global.key_special);
          }
          else
          {
             if(gmp_cspecial == true)
             {
                gmp_cspecial = false;
                keyboard_key_release(global.key_special);
             }
          }  
    
       // Enter:
          if(joystick_check_button(1, global.gmp_enter))
          {
             gmp_center = true;
             keyboard_key_press(global.key_enter);
          }
          else
          {
             if(gmp_center == true)
             {
                gmp_center = false;
                keyboard_key_release(global.key_enter);
             }
          }  
                                 
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
