<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dataselect_slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Slot data.
    dataslot_zone       = 0;
    dataslot_character  = 1;
    dataslot_cpu        = 2;
    dataslot_lives      = 3;
    dataslot_continues  = 0;
    dataslot_emeralds   = 0; 
    dataslot_completed  = 0;
    
 // Refresh data. Needs to be done after initializing the variables.
    alarm[1]            = 1; 
    
 // Player &amp; zone select.
    dataslot_combo        = 0; // Used to set the slot characters.
        
 // Misc.
    dataslot_arrow_frame   = 0
    dataslot_emerald_frame = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Refresh data.
    
    dataslot_zone       = global.save_slot_zone[dataslot_index];
    dataslot_character  = global.save_slot_character[dataslot_index];
    dataslot_cpu        = global.save_slot_cpu[dataslot_index];
    dataslot_lives      = global.save_slot_lives[dataslot_index];
    dataslot_continues  = global.save_slot_continues[dataslot_index];
    dataslot_emeralds   = global.save_slot_emeralds[dataslot_index]; 
    dataslot_completed  = global.save_slot_completed[dataslot_index];

 // Set zone id to -1 aka level select if the game is completed.
    if(dataslot_completed == 1)
    {
       dataslot_zone = -1;
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset slot.

 // Slot data.
    dataslot_zone       = 0;
    dataslot_character  = 1;
    dataslot_cpu        = 2;
    dataslot_lives      = 3;
    dataslot_continues  = 0;
    dataslot_emeralds   = 0; 
    dataslot_completed  = 0;
    
 // Player select.
    dataslot_combo = 0;
        
 // Save empty slot.
    save_delete(dataslot_index);
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character combination.

    if(dataslot_zone = 0 &amp;&amp; obj_dataselect_robotnik.active == false)
    {
       if(keyboard_check_pressed(global.key_up) &amp;&amp; obj_dataselect_cursor.datacursor_slot_index == dataslot_index &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
       {
          if(dataslot_combo == 8)
          {
             dataslot_combo  = 0;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
          else
          {
             dataslot_combo += 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }
       if(keyboard_check_pressed(global.key_down) &amp;&amp; obj_dataselect_cursor.datacursor_slot_index == dataslot_index &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
       {
          if(dataslot_combo == 0)
          {
             dataslot_combo  = 8;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
          else
          {
             dataslot_combo -= 1;
             aud_play_sound(general_switch, global.sfx_volume, 1, 0, 0);
          }
       }       
       if(dataslot_combo == 0)
       {
          dataslot_character = 1;
          dataslot_cpu       = 2;   
       }
       if(dataslot_combo == 1)
       {
          dataslot_character = 1;
          dataslot_cpu       = 3;   
       }
       if(dataslot_combo == 2)
       {
          dataslot_character = 2;
          dataslot_cpu       = 1;   
       }
       if(dataslot_combo == 3)
       {
          dataslot_character = 2;
          dataslot_cpu       = 3;   
       }
       if(dataslot_combo == 4)
       {
          dataslot_character = 3;
          dataslot_cpu       = 1;   
       }
       if(dataslot_combo == 5)
       {
          dataslot_character = 3;
          dataslot_cpu       = 2;   
       }
       if(dataslot_combo == 6)
       {
          dataslot_character = 1;
          dataslot_cpu       = 0;   
       }
       if(dataslot_combo == 7)
       {
          dataslot_character = 2;
          dataslot_cpu       = 0;   
       }
       if(dataslot_combo == 8)
       {
          dataslot_character = 3;
          dataslot_cpu       = 0;   
      }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Selecting Slot.

 // Check if cursor slot id is equal to this slot's id and that the cursor is not moving.
    if(obj_dataselect_cursor.datacursor_slot_index == dataslot_index &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
    {
       // Make sure to only run if robotnik is deactivated.
          if(obj_dataselect_robotnik.active == false)
          {
             // If we press Action or Start, start a new game, resume it or go to the level select.
                if(keyboard_check_pressed(global.key_action) || keyboard_check_pressed(global.key_enter))
                {
                   // New game:
                      if(dataslot_zone == 0)
                      {
                         if(instance_exists(obj_fade_newgame) == false)
                         {
                            // Set the first zone of the game. You can tweak it to change depending on the main character!
                               if(dataslot_character == 1)
                               {
                                  global.first_zone = rm_playground;
                               }
                               if(dataslot_character == 2)
                               {
                                  global.first_zone = rm_playground;
                               }        
                               if(dataslot_character = 3)
                               {
                                  global.first_zone = rm_playground;
                               }               
                               
                            // Set global. variables.
                               global.zone_id          = 1;
                               global.player_id        = dataslot_character;
                               global.cpu              = dataslot_cpu;
                               global.player_lives     = 3;
                               global.player_continues = 0;
                               global.player_emeralds  = 0;
                               global.game_completed   = 0;
                               
                            // Create the fade out.                                       
                               instance_create(0, 0, obj_fade_newgame);
                               obj_dataselect_cursor.datacursor_lock = true;
                         }
                      }
                      
                   // Resume game.
                      if(dataslot_zone &gt; 0)
                      {
                         if(instance_exists(obj_fade_loadgame) == false)
                         {
                            // Set global. variables.
                               global.zone_id          = dataslot_zone;
                               global.player_id        = dataslot_character;
                               global.cpu              = dataslot_cpu;
                               global.player_lives     = dataslot_lives;
                               global.player_continues = dataslot_continues;
                               global.player_emeralds  = dataslot_emeralds;
                               global.game_completed   = 0;
                               
                            // Create the fade out.                                       
                               instance_create(0, 0, obj_fade_loadgame);
                               obj_dataselect_cursor.datacursor_lock = true;
                         }
                      }   
                       
                   // Level select.
                      if(dataslot_zone == -1)
                      {
                         if(instance_exists(obj_fade_levelselect) == false)
                         {
                            // Set global. variables.
                               global.zone_id          = dataslot_zone;
                               global.player_id        = dataslot_character;
                               global.cpu              = dataslot_cpu;
                               global.player_lives     = dataslot_lives;
                               global.player_continues = dataslot_continues;
                               global.player_emeralds  = dataslot_emeralds;
                               global.game_completed   = 1;
                               
                            // Create the fade out.                                       
                               instance_create(0, 0, obj_fade_levelselect);
                               obj_dataselect_cursor.datacursor_lock = true;
                         }
                      }                                         
                }
          }
    }
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw slot.

 // Draw main sprite.
    draw_sprite(sprite_index, -1, x, y);
    
 // Draw Slot icon.
    if(dataslot_completed == 0)
    {
       draw_sprite(spr_dataselect_icon, dataslot_zone, x+5, y+5);
    }
    else
    {
       draw_sprite(spr_dataselect_icon, sprite_get_number(spr_dataselect_icon)-1, x+5, y+5);    
    }
    
 // Draw Characters.
    if(dataslot_cpu != 0)
    {
       if(dataslot_zone == 0)
       {
          draw_sprite_ext(spr_dataselect_characters, dataslot_cpu, (x+sprite_get_width(sprite_index)/2)+8, y+sprite_get_height(sprite_index)-64, -1, 1, 0, c_white, 1); 
       }       
       else
       {
          draw_sprite_ext(spr_dataselect_characters, dataslot_cpu, (x+sprite_get_width(sprite_index)/2)+8, y+sprite_get_height(sprite_index)-97, -1, 1, 0, c_white, 1);        
       }
    }     
    if(dataslot_character != 0)
    {
       if(dataslot_cpu == 0)
       {
          if(dataslot_zone == 0)
          {
             draw_sprite_ext(spr_dataselect_characters, dataslot_character, (x+sprite_get_width(sprite_index)/2)-2, y+sprite_get_height(sprite_index)-64, 1, 1, 0, c_white, 1); 
          }
          else
          {
             draw_sprite_ext(spr_dataselect_characters, dataslot_character, (x+sprite_get_width(sprite_index)/2)-2, y+sprite_get_height(sprite_index)-97, 1, 1, 0, c_white, 1);          
          }
       }
       else
       {
          if(dataslot_zone == 0)
          {
             draw_sprite_ext(spr_dataselect_characters, dataslot_character, (x+sprite_get_width(sprite_index)/2)-12, y+sprite_get_height(sprite_index)-64, 1, 1, 0, c_white, 1);    
          }  
          else
          {
             draw_sprite_ext(spr_dataselect_characters, dataslot_character, (x+sprite_get_width(sprite_index)/2)-12, y+sprite_get_height(sprite_index)-97, 1, 1, 0, c_white, 1);           
          }  
       }
    }
    
 // Draw Lives, continues and emeralds.
    if(dataslot_zone != 0)
    {
       draw_sprite(spr_dataselect_lives, dataslot_character-1, x+29, y+131);
       draw_sprite(spr_continues, dataslot_character-1, x+38, y+173);
       if(dataslot_emeralds &gt; 0)
       {
          dataslot_emerald_frame += 0.20;
          draw_sprite(spr_dataselect_emeralds, floor(dataslot_emerald_frame), x+29, y+113);
          draw_text(x+29+24, y+115, string_place_number(dataslot_emeralds, 2, 0)); 
       }
       draw_set_font(global.dataselect_font);
       draw_set_color(c_white);
       draw_text(x+29+24, y+133, string_place_number(dataslot_lives, 2, 0)); 
       draw_text(x+29+24, y+159, string_place_number(dataslot_continues, 2, 0)); 
    }
     
 // Draw arrows.
    if(obj_dataselect_cursor.datacursor_slot_index == dataslot_index &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0 &amp;&amp; obj_dataselect_robotnik.active == false)
    {
       if(dataslot_zone == 0)
       {
          dataslot_arrow_frame += 0.15;
          draw_sprite(spr_dataselect_arrow, floor(dataslot_arrow_frame), x+sprite_get_width(sprite_index)/2, y+sprite_get_height(sprite_index)/2 + 27)
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
