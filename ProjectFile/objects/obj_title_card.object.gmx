<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999998</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    tc_state              = 1;                                            // Title Card state - used to move positions.
     
    tc_zone_position_x[0] = view_wview;                                   // X Position of the Zone name text.
    tc_zone_position_x[1] = view_wview;                                   // X Position of the "Zone" string below the zone name text.                                
    tc_zone_position_y    = 90;                                           // Y Position of the zone name text.
    
    tc_act_position_x     = view_wview;                                   // X Position of the Act number.
    tc_act_position_y     = 90+(sprite_get_height(spr_title_card_act)*2); // Y Position of the Act number.
    
    tc_banner_position_x  = 0+sprite_get_width(spr_title_card_banner);      // X Position of the Red Banner.
    tc_banner_position_y  = 0-sprite_get_height(spr_title_card_banner);     // Y Position of the Red Banner.
    
    tc_stop_timer         = 60;                                           // How long we stop after showing all details.
    tc_backdrop_alpha     = 1;                                            // Alpha of the black backdrop.
    
    tc_completed          = 0;                                            // Checks if title card is done.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy.
    if(tc_completed == 0)
    {
       tc_completed = 1;
       alarm[0]     = 60*4;
    }
    else
    {
       instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move Positions.

 // Banner:
    if(tc_state == 1)
    {
       if(tc_banner_position_y != 0)
       {
          tc_banner_position_y = min(0, tc_banner_position_y+10);
       }
       else
       {
          if(tc_banner_position_y &gt; 0)
          {
             tc_banner_position_y = 0;
          }
          tc_state = 2;
       }
    }
    
 // Zone Name:
    if(tc_state == 2)
    {
       if(tc_zone_position_x[0] != global.screen_width-16-string_width(string(global.zone_name)))
       {
          tc_zone_position_x[0] = max(global.screen_width-16-string_width(string(global.zone_name)), tc_zone_position_x[0]-10);
       }  
       if(tc_zone_position_x[0] = max(global.screen_width-16-string_width(string(global.zone_name)), tc_zone_position_x[0]-10))
       {
          if(tc_zone_position_x[1] != global.screen_width-16-string_width(string("ZONE")))
          {
             tc_zone_position_x[1] = max(global.screen_width-16-string_width(string("ZONE")), tc_zone_position_x[1]-10);
          }
       }   
    }
 
 // Act Number:
    if(tc_state == 2 &amp;&amp; tc_zone_position_x[1] = max(global.screen_width-16-string_width(string("ZONE")), tc_zone_position_x[1]-10))
    {
       if(tc_act_position_x != global.screen_width-24-sprite_get_width(spr_title_card_act))
       {
          tc_act_position_x = max(global.screen_width-24-sprite_get_width(spr_title_card_act), tc_act_position_x-10);
       }
       else
       {
          tc_state = 3;
       }
    }
    
 // Count down:
    if(tc_state == 3)
    {
       if(tc_stop_timer &gt; 0)
       { 
          tc_stop_timer -= 1;
       }
       else
       {
          if(tc_backdrop_alpha != -2)
          {
             tc_backdrop_alpha -= 0.10;
          }
          else
          {
             tc_state = 4;
          }
       }
    }
    
 // Disappear:
    if(tc_state == 4)
    {
       if(tc_banner_position_y != -sprite_get_height(spr_title_card_banner))
       {
          tc_banner_position_y = max(-sprite_get_height(spr_title_card_banner), tc_banner_position_y-15);
       }
       if(tc_zone_position_x[0] != view_wview)
       {
          tc_zone_position_x[0] = max(-16-string_width(string(global.zone_name)), tc_zone_position_x[0]+15);
       }
       if(tc_zone_position_x[1] != view_wview)
       {
          tc_zone_position_x[1] = max(-16-string_width(string("ZONE")), tc_zone_position_x[1]+15);
       }
       if(tc_act_position_x != view_wview)
       {
          tc_act_position_x = max(-24-sprite_get_width(spr_title_card_act), tc_act_position_x+15);
       }
    }
    
 // Enable movement:
    if(tc_backdrop_alpha &lt; 1)
    {
       if(instance_exists(obj_player))
       {
          with(par_player)
          {
               x_allow = 1;
               y_allow = 1;
          }
       }
       if(tc_completed == 0 &amp;&amp; alarm[0] = -1)
       {
          global.do_time = 1;
          alarm[0]       = 60;
       }
    }
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw title card.

 // Backdrop:
    draw_set_color(c_black);
    draw_set_alpha(tc_backdrop_alpha);
    draw_rectangle(view_xview+0, view_yview+0, view_xview+view_wview, view_yview+view_hview, 0);
    draw_set_alpha(1);
    draw_set_color(c_white);

 // Banner:
    draw_sprite(spr_title_card_banner, -1, floor(view_xview+tc_banner_position_x), floor(view_yview+tc_banner_position_y));
    
 // Zone Name:
    draw_set_halign(fa_left);
    draw_set_font(global.title_card)
    draw_text(view_xview+tc_zone_position_x[0], view_yview+tc_zone_position_y, string(global.zone_name));
    
    // Only draw the things below if not in a bonus stage.
    if !instance_exists(obj_bonus_controller)
        {
         // 'Zone' Text
            draw_text(view_xview+tc_zone_position_x[1], view_yview+tc_zone_position_y, string("#ZONE"));
            
         // Zone Act:
            draw_sprite(spr_title_card_act, global.zone_act-1, view_xview+tc_act_position_x, view_yview+tc_act_position_y);
        }
    
 // Missions
    if instance_exists(obj_mission_controller)
    {
        draw_set_font(global.main_font)
        draw_set_alpha(min(0.8, tc_backdrop_alpha))
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        
        draw_text(view_xview[0] + tc_banner_position_y, view_yview[0] + 260, obj_mission_controller.mission_total)
        
        draw_set_valign(fa_top);
        draw_set_alpha(1);
    }
    
    // Reset the font to the title card font for measurements
    draw_set_font(global.title_card)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
