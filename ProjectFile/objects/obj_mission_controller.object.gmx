<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_editor_missions</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999997</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object that displays the current missions.
// This item uses creation code.
// Set up the missions in the creation code.

/// ============== MISSION DEFAULTS.
    
    // Goal
        mission[MISSION_GOAL] = true;
    
    // Rings
        mission[MISSION_RINGS] = false;
        mission_specific[MISSION_RINGS] = 50; 
    
    // Time 
        mission[MISSION_TIME] = false;
        mission_specific[MISSION_TIME] = 500; 

/// ============== Data

        mission_total = "";    
        alarm[0] = 5;
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Mission Text
    // Default Mission Text.
        mission_total = "MISSIONS:#";
    
    // Goal
        if (mission[MISSION_GOAL])
        {
           mission_total += "Get to the goal. #"
        }
    
    // Rings
        if (mission[MISSION_RINGS])
        {
            mission_total += "Get " + string(mission_specific[MISSION_RINGS]) + " rings. #";
        }
        
    // Time
        if (mission[MISSION_TIME])
        {
            mission_total += "Beat the stage under " + string(mission_specific[MISSION_TIME]) + " seconds. #";
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Rings Mission.
    if (mission[MISSION_RINGS])
    {
        if global.player_rings &gt;= mission_specific[MISSION_RINGS]
        {
            show_message("YOU COMPLETED THE RING MISSIONS")
            scr_create_smoke(obj_player.x, obj_player.y, spr_star_sparkles)
            mission[MISSION_RINGS] = false;
        }    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Missions Display.

    // Display Back
        draw_sprite(spr_display_missions, 0, view_xview[0] + 480, view_yview[0] + 270);

    // =================== Missions.
        // Goal
            if (mission[MISSION_GOAL])
            {
                draw_sprite(spr_display_missions, MISSION_GOAL, view_xview[0] + 480, view_yview[0] + 270);
            }
            
        // Rings
            if (mission[MISSION_RINGS])
            {
                draw_sprite(spr_display_missions, MISSION_RINGS, view_xview[0] + 480, view_yview[0] + 270);
            }
            
        // Time
            if (mission[MISSION_TIME])
            {
                draw_sprite(spr_display_missions, MISSION_TIME, view_xview[0] + 480, view_yview[0] + 270);
            }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
