<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sonic_super_run</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_allow = 0;
y_allow = 0;
global.game_time    = 0;
Rings = 50 //timer
image_speed = 0.25;
alarm[0] = room_speed

//base controls
UpKey = global.key_up;
DownKey = global.key_down;

KeyUp = keyboard_check(UpKey)
KeyDown = keyboard_check(DownKey)

//state machine vars
State     = 0
StateFly  = 0
StateHurt = 1
StateDie  = 2
StateWin  = 3

//general movement vars
HSpeed          = 2
NormalHSpeed    = 5
HSpeedMax       = 7

VSpeed          = 0
VSpeedMax       = 5
Accel = 0.046875; // how fast to move horizontally and whatnot

VAccel = 0.21875; // how to move vertically
VDecel = 0.25; // how to move vertically

//extras
BoostedTimerMax = 30 //this will determine how long the player will have a speed boost when collecting blue orbs
BoostedTimer    = 0

KnockbackSpeed    = 6 //speed at which player will be knockbed back upon hitting an obstacle
KnockbackTimerMax = 45 //how long they could be in the knockback state AT MOST
KnockbackTimer    = 45 //how long theyll be in the knockback state IN GENERAL




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//we got power
if Rings &gt; 0
{
 Rings -= 1 
 alarm[0] = room_speed
}else //we dont anymore, DIIIIE!!!
{
vspeed = -3
State = StateDie
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global timers.

 // Game time:
           global.game_time += 1000/60;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Limiters
// Fade Away from Bonus if Dead.
    if State = StateDie
    {
    if !instance_exists(obj_fade_from_bonus)
     {
        instance_create(x, y, obj_fade_from_bonus);
     }
    
    }

// Special Stage
    if (State != StateDie &amp;&amp; !instance_exists(obj_special_results) &amp;&amp; x_allow &amp;&amp; y_allow)
    {
        x += HSpeed
        y += VSpeed
    }
    else
    {
        HSpeed = 0;
        VSpeed = 0;
        exit;
    }

// Key Inputs
    KeyUp = keyboard_check(UpKey)
    KeyDown = keyboard_check(DownKey)

// Various Timers
    if (BoostedTimer &gt;= 1)
    {
        BoostedTimer -= 1
    }
    
    if (KnockbackTimer &gt;= 1)
    {
        KnockbackTimer -= 1
    }

// Wrap Room
    if (y &gt; room_height &amp;&amp; State != StateDie)
    {
        y = 0
    }
    
    if (y &lt; 0 &amp;&amp; State != StateDie)
    {
        y = room_height
    }

// Limiters
if (VSpeed &gt; VSpeedMax)
{
    VSpeed = VSpeedMax
}

if (VSpeed &lt; -VSpeedMax)
{
    VSpeed = -VSpeedMax
}

if (HSpeed &gt; HSpeedMax)
{
    HSpeed = HSpeedMax
}

// Limit Rings
if (Rings &lt; 0)
{
    Rings = 0
}

if (Rings &gt; 50)
{
    Rings = 50;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites

if (State == StateFly &amp;&amp; HSpeed &gt; 0)
{
    if BoostedTimer &lt;= 0
    {
    sprite_index = spr_sonic_super_run;
    }
    else
    {
    sprite_index = spr_sonic_super_run_fast;
    scr_afterimage_default()
    }
}

if State == StateHurt or (State == StateFly &amp;&amp; HSpeed &lt; 0)
{
    sprite_index = spr_sonic_super_hurt;
}

instance_create(x, y, obj_invincibility_sparkle)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Core Gameplay
switch(State)
{
    ///NORMAL MOVEMENT
     case StateFly: 
           // Moving up and down
               if(keyboard_check(DownKey)) // &lt; Moving Down
               {
                  if(VSpeed &gt;= 0)
                  {
                     VSpeed += (floor(5)-VSpeed)*VAccel;
                  }
                  else
                  {  
                     VSpeed += (floor(5)-VSpeed)*VDecel;        
                  }
               } 
               if(keyboard_check(UpKey)) // &lt; Moving Up
               {
                  if(VSpeed &lt;= 0)
                  {
                     VSpeed += (floor(-5)-VSpeed)*VAccel;
                  }
                  else
                  {
                     VSpeed += (floor(-5)-VSpeed)*VDecel;        
                  }
               } 
               
               // Decelerate to a halt.
                if(!keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down))
                {
                    VSpeed += (floor(0.0)-VSpeed)*VDecel;
                }
          
          // Getting back up to speed
              if (HSpeed &lt; NormalHSpeed)
              {
                HSpeed += Accel
              }
          
          //getting a speed boost in general, this stacks with the regular accel code above so he'll always move faster
              if (BoostedTimer &gt;= 1) 
              { 
                   if HSpeed &lt; HSpeedMax 
                   { 
                        HSpeed += Accel
                   } 
              }
              else
              if (BoostedTimer &lt;= 0)
              {
                   if HSpeed &gt; NormalHSpeed 
                   { 
                        HSpeed -= Accel
                   } 
              }
     break;
     
     //WE ARE HURT
     case StateHurt: 
      //moving up and down
      if KeyUp &amp;&amp; VSpeed &gt; -VSpeedMax  { VSpeed -= VAccel/2}
      if KeyDown &amp;&amp; VSpeed &lt; VSpeedMax { VSpeed += VAccel/2}
      
      //getting back up to speed
      if HSpeed &lt; NormalHSpeed { HSpeed += Accel/2}
      
      //reutrn to normal state and reset knockback timer
      if KnockbackTimer &lt;= 0 { State = StateFly; KnockbackTimer = KnockbackTimerMax }
     break;
     
     //WE ARE DEAD
     case StateDie: 
     gravity = 0.1
     
     if !instance_exists(obj_fade_from_bonus)
     {
        instance_create(x, y, obj_fade_from_bonus);
     }
     
     if y &gt;= room_height { room_restart() }
     break;
     
     case StateWin: 
     gravity = 0
     HSpeed = 0
     VSpeed = 0
     break;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Warp to start.

if x &gt; room_width
{
    event_user(0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xdif = x - obj_SS_emerald.x;
x = 0;
obj_SS_emerald.x = -xdif;
respawn_respawnables();
instance_create(x, y, obj_fade_in_white);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,floor(x),floor(y))

//draw alternate sprite for looping. 

if (bbox_bottom &gt; room_height) // If top side is offscreen
{
 draw_sprite(sprite_index, image_index, x, y  - room_height,);
}

if (bbox_top &lt; 0) // If bottom side is offscreen
{
 draw_sprite(sprite_index, image_index, x , y + room_height);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>restart game</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
