<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999995</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Bonuses:
    bonus_rings = (global.player_rings * 100);
    bonus_total = (0);

    seconds = floor(global.game_time/1000);
    
    if(seconds &lt;= 29)
    {
       bonus_time   = 50000;
    }
    else if(seconds &gt; 29 &amp;&amp; seconds &lt;= 44)
    {
            bonus_time   = 10000;
    }
    else if(seconds &gt;= 45 &amp;&amp; seconds &lt;= 59)
    {
            bonus_time   = 5000;
    }
    else if(seconds &gt;= 60 &amp;&amp; seconds &lt;= 89)
    {
            bonus_time   = 4000;
    }
    else if(seconds &gt;= 90 &amp;&amp; seconds &lt;= 119)
    {
            bonus_time   = 3000;
    }
    else if(seconds &gt;= 120 &amp;&amp; seconds &lt;= 179)
    {
            bonus_time   = 2000;
    }
    else if(seconds &gt;= 180 &amp;&amp; seconds &lt;= 239)
    {
            bonus_time   = 1000;
    }
    else if(seconds &gt;= 240 &amp;&amp; seconds &lt;= 299)
    {
            bonus_time   = 500;
    }
    else if(seconds &gt;= 300)
    {
            bonus_time   = 0;
    }
    bonus_continue = 0;
 
 // Reset Variables.
    global.checkpoint_x = -1;
    global.checkpoint_y = -1;
    global.checkpoint_t =  0;
    
 // Allow counting:
    can_do      = 0; 
    can_count   = 0;
    count_sound = 1;
    
 // Skip:
    can_skip = 0; 

 // Positions / Going out:
    going_out      =    0;
    go_off         =  global.screen_width;
    go_off_2       = -global.screen_width;
    
 // Text Positions:
    result_gfx_position[0]        = -global.screen_width;
    result_gfx_position[1]        =  global.screen_width;    
    result_gfx_position[2]        =  global.screen_width+30;
    result_gfx_position[3]        =  global.screen_width+60;
    result_gfx_position[4]        =  global.screen_width+90;
    result_gfx_position_completed = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End it.

    if(going_out = 0)
    {
       if(go_off_2 &lt; 0)
       {
          go_off_2 += 20;
          alarm[5] = 1;
       }
    }
    else
    {
       if(instance_exists(obj_fade_next) == false)
       {
          // Create fade.
             instance_create(x, y, obj_fade_next);
             
          // Save progress. 
             if(global.save_selected != 0)
             {
               save_create(global.save_selected);
             }          
       }
    
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Going out.
    
    if(going_out = 0)
    {
       if(go_off &gt; 0)
       {
          go_off -= 20;
          alarm[4] = 1;
       }
       else
       {
          alarm[5] = 1;
       }
    }
    else
    {
       alarm[5] = 1; 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Counting.

    can_count = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Counting sounds.
 
    if(count_sound = 1)
    {
       can_skip  = 1;
       aud_play_sound(general_score_points, global.sfx_volume, 1, 0, 0)
       alarm[2] = 5;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Bonus.

    if(bonus_time &gt; 0)
    {
       bonus_time          -= 10;
       bonus_total         += 10;
       global.player_score += 10;
       alarm[1]             =  1;
    }
    else
    {
       bonus_time = 0;
       alarm[1]   = -1;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ring Bonus.
    
    if(bonus_rings &gt; 0)
    {
       bonus_rings         -= 10;
       bonus_total         += 10;
       global.player_score += 10;
       alarm[0]             =  1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text Positions.
    
    if(going_out == 0)
    {
       if(result_gfx_position[0] &lt; 0)
       {
          result_gfx_position[0] += 10;
       }
       else
       {
          result_gfx_position[0] = 0;    
       }
       if(result_gfx_position[1] &gt; 0){
          result_gfx_position[1] -= 10;
       }
       else
       {
          result_gfx_position[1] = 0;    
       }    
       if(result_gfx_position[2] &gt; 0){
          result_gfx_position[2] -= 10;
       }
       else
       {
          result_gfx_position[2] = 0;    
       }    
       if(result_gfx_position[3] &gt; 0)
       {
          result_gfx_position[3] -= 10;
       }
       else
       {
          result_gfx_position[3] = 0;    
       }    
       if(result_gfx_position[4] &gt; 0)
       {
          result_gfx_position[4] -= 10;
       }
       else
       {
          result_gfx_position[4] = 0;              
       }       
       if(result_gfx_position[0] == 0 &amp;&amp; result_gfx_position[1] == 0 &amp;&amp; result_gfx_position[2] == 0 &amp;&amp;
          result_gfx_position[4] == 0 &amp;&amp; result_gfx_position_completed == false)
       {
          result_gfx_position_completed = true;
          
          // Trigger Bonuses.
             alarm[0] = 280;
             if(bonus_time &gt; 0)
             {
                alarm[1] = 280;
             }
             alarm[2] = 280;
             alarm[3] = 280;
             alarm[4] = 30;          
       }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish counting bonuses.

    if(can_count == 0)
    {
       if(bonus_rings == 0 &amp;&amp; bonus_time == 0)
       {
          if(can_do == 0)
          {
             count_sound         = 0;
             global.player_rings = 0;
             can_do              = 1;
             aud_play_sound(general_score_result, global.sfx_volume, 1, 0, 0);             
          }
          if(can_do = 1 &amp;&amp; audio_is_playing(general_score_result) == false)
          {
             can_do = 2;
          }
          if(going_out = 0 &amp;&amp; can_do == 2)
          {
             if(audio_is_playing(jingle_scoring) == false)
             {
                going_out = 1
                alarm[4] = 100;
             }
          }
       }
    }

    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Skip counting.

    if(keyboard_check(global.key_enter) &amp;&amp; can_skip == 1)
    {
       bonus_total        += bonus_time + bonus_rings;
       bonus_time          =  0;      
       bonus_rings         =  0;      
       alarm[0]            = -1;
       alarm[1]            = -1;  
       alarm[3]            =  1; 
       can_skip            =  0;
       global.player_score += bonus_total;      
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Continue bonus.
   
    if(bonus_total &gt;= 10000)
    {
       if(bonus_continue == 0)
       {
          bonus_continue = 1;
          global.player_continues += 1;
          aud_play_sound(player_life, global.sfx_volume, 1, 0, 0);        
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Results.

 // "Character" Got:
    draw_sprite(spr_results_name, obj_level_controller.player_index-1, view_xview+92+32+result_gfx_position[0], view_yview+56+32);

 // Through:
    draw_sprite(spr_results_through, 0, view_xview+149+32+result_gfx_position[1], view_yview+76+32);
    
 // Act Letter:
    draw_sprite(spr_title_card_act, global.zone_act-1, view_xview+274+32+result_gfx_position[1], view_yview+59+32);
    
 // Time Bonus:
    draw_sprite(spr_results_time, 0, view_xview+114+32+result_gfx_position[2], view_yview+108+32);     

 // Ring Bonus:
    draw_sprite(spr_results_ring, 0, view_xview+114+32+result_gfx_position[3], view_yview+124+32);  

 // Total:
    draw_sprite(spr_results_total, 0, view_xview+134+32+result_gfx_position[4], view_yview+151+32);   
    
 // Draw Bonuses:
    draw_set_font(global.hud_font)
    draw_set_color(c_white)
    draw_set_halign(fa_right)
    
    draw_number_zero(view_xview+297+8+32+result_gfx_position[2], view_yview+113+32,''+ string(bonus_time),  0);
    draw_number_zero(view_xview+297+8+32+result_gfx_position[3], view_yview+129+32,''+ string(bonus_rings), 0);
    draw_number_zero(view_xview+297+8+32+result_gfx_position[4], view_yview+157+32,    string(bonus_total), 0);
    
    draw_set_halign(-1)    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
