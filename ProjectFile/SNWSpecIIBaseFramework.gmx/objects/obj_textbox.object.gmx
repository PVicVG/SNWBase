<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999998</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the textbox object

with obj_level_controller
{
event_user(0)
}

text = noone;
text_visible = "";
text_page = 0;
text_count = 0;
spd = .5;
width = 260;
margin = 8;
x_text_offset = 98;
y_text_offset = 9;
x_port_offset = 30;
y_port_offset = 7;
key_x_next_timer = 20;
key_x_next_timer_max = key_x_next_timer;
exist_timer = 0;
skipped = false;
x = (480-sprite_width)/2;
y = 4;
destroy = false;
aud_play_simple(general_message_open)

earrape = true;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tweens
black_alpha = 0;
general_off = -100;
TweenFireTo(id, EaseInOutQuad, 0, false, 0, 30, "black_alpha", 1);
TweenFireTo(id, EaseOutQuad, 0, false, 10, 30, "general_off", 8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unlock player
if instance_exists(obj_player)
{
with (obj_player)
{
control_lock = false;
}
}

with obj_level_controller
{
event_user(1)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Textbox Operations

    // Lock Player
    if instance_exists(obj_player)
    {
        with (obj_player)
        {
            control_lock = true;
            player_inputs_null();
        }
    }
    
    //Textbox player operation controls
    skipped = false;
    draw_set_font(global.fnt_textbox);

    if (exist_timer) &amp;&amp; destroy = false
    {
      //Z button (A)
      if (keyboard_check_pressed(global.key_action) &amp;&amp; text_count &lt; string_length(text[text_page]))
      {
        scr_textbox_skip_to_end();
        key_x_next_timer = key_x_next_timer_max;
      }
      else if (keyboard_check_pressed(global.key_action))
      {
        text_page += 1;
        text_count = 0;
        if (text_page &gt; last_page)
        {
          event_user(0);
          exit;
        }
      }
      //X button (B)
      if (key_x_next_timer)
      {
        key_x_next_timer -= 1;
      }
      if (keyboard_check(global.key_special) &amp;&amp; text_count &lt; string_length(text[text_page]))
      {
        scr_textbox_skip_to_end();
        key_x_next_timer = key_x_next_timer_max;
      }
      else if (keyboard_check(global.key_special) &amp;&amp; text_count &gt;= string_length(text[text_page]) &amp;&amp; !key_x_next_timer)
      {
        key_x_next_timer = key_x_next_timer_max;
        text_page += 1;
        text_count = 0;
      }
      if (text_page &gt; last_page)
      {
        event_user(0);
        exit;
      }
      if (text_count == string_length(text[text_page])-1 &amp;&amp; !keyboard_check(global.key_special))
      {
        key_x_next_timer = 0;
      }
    }
    if (exist_timer &lt; 1) exist_timer += 1;
    if (skipped) exit;
    //Get the last space
    if (string_char_at(text[text_page],text_count) == " ")
    {
      last_space = text_count;
    }
    //Add smart returns
    var text_words;
    text_words = scr_string_copy_words(text[text_page],1,text_count);
    if (string_width(text_words) &gt; width)
    {
      //Remove the space
      text[text_page] = string_delete(text[text_page],last_space,1);
      
      //Add a return
      text[text_page] = string_insert("#",text[text_page],last_space);
    }
    //Get the visible text
    text_visible = string_copy(text[text_page],0,text_count);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
destroy = true;
text_page = last_page;
text_count = string_length(text[text_page]);

aud_play_simple(general_message_close)
TweenFireTo(id, EaseInOutQuad, 0, false, 0, 15, "black_alpha", 0);
TweenFireTo(id, EaseInOutQuad, 0, false, 5, 15, "general_off", -100);
alarm[0] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the textbox
draw_sprite_ext(spr_black_bars_faded, 0, view_xview[0], view_yview[0], 1, 1, 0, c_white, black_alpha)

draw_set_halign(fa_left);
draw_sprite(sprite_index,0, view_xview[0] + x, view_yview[0] + y + general_off);
draw_set_font(global.fnt_textbox);
draw_set_color(c_white);
draw_text(view_xview[0] + x+x_text_offset, view_yview[0] + y + y_text_offset + general_off, text_visible);

if text_port[text_page] != -1
{
draw_sprite(spr_character_portraits,text_port[text_page], view_xview[0] + x + x_port_offset,view_yview[0] + y + y_port_offset + general_off);
}

if text_count &lt; string_length(text[text_page])
{
draw_sprite(spr_textbox_typing, global.object_time div 120, view_xview[0] + x + 379, view_yview[0] + y + 52 + general_off);
}
else
{
draw_sprite(spr_textbox_finished, global.object_time div 120, view_xview[0] + x + 379, view_yview[0] + y + 52 + general_off);
}

//Add to the letter count
if (text_count &lt; string_length(text[text_page])) &amp;&amp; !destroy
{
text_count += spd;
}
if (earrape &amp;&amp; text_count == text_count div 1 &amp;&amp; text_count &lt; string_length(text[text_page])) &amp;&amp; !destroy
{
  aud_play_simple(general_text);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
