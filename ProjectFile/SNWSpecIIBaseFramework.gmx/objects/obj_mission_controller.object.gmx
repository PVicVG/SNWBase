<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_editor_missions</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999997</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object that displays the current missions.
// This item uses creation code.
// Set up the missions in the creation code.

/// ============== MISSION DEFAULTS.
    
    // Goal
        mission[MISSION_GOAL] = true;
    
    // Rings
        mission[MISSION_RINGS] = false;
        mission_specific[MISSION_RINGS] = 50; 
    
    // Time 
        mission[MISSION_TIME] = false;
        mission_specific[MISSION_TIME] = 500; 
        
    // Badnik 
        mission[MISSION_BADNIKS] = false;
        mission_specific[MISSION_BADNIKS] = 5; 
        
    // Flickies 
        mission[MISSION_FLICKIES] = false;
        mission_specific[MISSION_FLICKIES] = 5; 
        
/// ============== Data

    initialized = false
    mission_total = "";    
    alarm[0] = 5;
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Mission Text
event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit if not initialized.
    if (initialized = false)
    {
        exit;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control GOAL Mission.
    if instance_exists(obj_player) &amp;&amp; instance_exists(obj_sign_post)
    {
        if (mission[MISSION_GOAL])
        {
            if instance_exists(obj_results) or obj_player.x &gt; obj_sign_post.x
            {
                // Display a message
                    scr_display_message(0, "You got to the goal!")
                               
                // Give Network Token
                    scr_give_network_token(MISSION_GOAL)       
                
                // Mission completed.
                    mission[MISSION_GOAL] = false;
            }    
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control RINGS Mission.
    if (mission[MISSION_RINGS])
    {
        if global.player_rings &gt;= mission_specific[MISSION_RINGS]
        {
            // Display a message
                scr_display_message(0, "You completed the ring mission!")
                                      
            // Give Network Token
                scr_give_network_token(MISSION_RINGS)                
                
            // Mission completed.
                mission[MISSION_RINGS] = false;
        }    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control TIME Mission.
    if (mission[MISSION_TIME])
    {
        if global.game_time &lt;= mission_specific[MISSION_TIME] &amp;&amp; instance_exists(obj_results)
        {
            // Display a message
                scr_display_message(0, "You completed the time mission!")
                           
            // Give Network Token
                scr_give_network_token(MISSION_TIME)       
            
            // Mission completed.
                mission[MISSION_TIME] = false;
        }    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control BADNIKS Mission.
    if (mission[MISSION_BADNIKS])
    {
        if global.player_badniks &gt;= mission_specific[MISSION_BADNIKS]
        {
            // Display a message
                scr_display_message(0, "You completed the badnik mission!")
                                      
            // Give Network Token
                scr_give_network_token(MISSION_BADNIKS)                
                
            // Mission completed.
                mission[MISSION_BADNIKS] = false;
        }    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control FLICKIES Mission.
    if (mission[MISSION_FLICKIES])
    {
        if global.player_flickies &gt;= mission_specific[MISSION_FLICKIES]
        {
            // Display a message
                scr_display_message(0, "You completed the flickies mission!")
                                      
            // Give Network Token
                scr_give_network_token(MISSION_FLICKIES)                
                
            // Mission completed.
                mission[MISSION_FLICKIES] = false;
        }    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Missions Active
    // GOAL.
        if (mission[MISSION_GOAL])
        {
            // Check Save.
                collectable_check("TOKEN", string(global.zone_name) + string(global.zone_act) + "_" + string(MISSION_GOAL))
            
            // Disable if collected.
                if (collected = true)
                {
                    mission[MISSION_GOAL] = false;   
                }
        }
    
    // RINGS.
        if (mission[MISSION_RINGS])
        {
            // Check Save.
                collectable_check("TOKEN", string(global.zone_name) + string(global.zone_act) + "_" + string(MISSION_RINGS))
            
            // Disable if collected.
                if (collected = true)
                {
                    mission[MISSION_RINGS] = false;   
                }
        }
        
    // TIME.
        if (mission[MISSION_TIME])
        {
            // Check Save.
                collectable_check("TOKEN", string(global.zone_name) + string(global.zone_act) + "_" + string(MISSION_TIME))
            
            // Disable if collected.
                if (collected = true)
                {
                    mission[MISSION_TIME] = false;   
                }
        }
        
    // BADNIKS.
        if (mission[MISSION_BADNIKS])
        {
            // Check Save.
                collectable_check("TOKEN", string(global.zone_name) + string(global.zone_act) + "_" + string(MISSION_BADNIKS))
            
            // Disable if collected.
                if (collected = true)
                {
                    mission[MISSION_BADNIKS] = false;   
                }
        }
        
    // FLICKIES.
        if (mission[MISSION_FLICKIES])
        {
            // Check Save.
                collectable_check("TOKEN", string(global.zone_name) + string(global.zone_act) + "_" + string(MISSION_FLICKIES))
            
            // Disable if collected.
                if (collected = true)
                {
                    mission[MISSION_FLICKIES] = false;   
                }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Mission Text
    // Default Mission Text.
        mission_total = "MISSIONS:#";
    
    // Goal
        if (mission[MISSION_GOAL])
        {
           mission_total += "- Get to the goal. #"
        }
    
    // Rings
        if (mission[MISSION_RINGS])
        {
            mission_total += "- Get " + string(mission_specific[MISSION_RINGS]) + " rings. #";
        }
        
    // Time
        if (mission[MISSION_TIME])
        {
            mission_total += "- Beat the stage under " + string(floor(mission_specific[MISSION_TIME]/60000))+":"+string_place_number(floor(mission_specific[MISSION_TIME]/1000) mod 60, 2, 0) + ". #";
        }
       
    // Badniks
        if (mission[MISSION_BADNIKS])
        {
            mission_total += "- Destroy " + string(mission_specific[MISSION_BADNIKS]) + " badniks. #";
        }
         
    // Flickies
        if (mission[MISSION_FLICKIES])
        {
            mission_total += "- Rescue " + string(mission_specific[MISSION_FLICKIES]) + " flickies. #";
        }
        
    // All Missions Completed - Stop Missions
        if (mission_total = "MISSIONS:#")
        {
            visible = false;
            mission_total = "All missions completed."   
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
initialized = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Missions Display.

    var _roff;
    _roff = obj_level_controller.hud_rightoff;
    
    // Display Back
        draw_sprite(spr_display_missions, 0, view_xview[0] + 480 + _roff, view_yview[0] + 4);

    // =================== Missions.
        // Goal
            if (mission[MISSION_GOAL])
            {
                draw_sprite(spr_display_missions, MISSION_GOAL, view_xview[0] + 480 + _roff, view_yview[0] + 4);
            }
            
        // Rings
            if (mission[MISSION_RINGS])
            {
                draw_sprite(spr_display_missions, MISSION_RINGS, view_xview[0] + 480 + _roff, view_yview[0] + 4);
            }
            
        // Time
            if (mission[MISSION_TIME])
            {
                draw_sprite(spr_display_missions, MISSION_TIME, view_xview[0] + 480 + _roff, view_yview[0] + 4);
            }
            
        // Badniks
            if (mission[MISSION_BADNIKS])
            {
                draw_sprite(spr_display_missions, MISSION_BADNIKS, view_xview[0] + 480 + _roff, view_yview[0] + 4);
            }
            
        // Flickies
            if (mission[MISSION_FLICKIES])
            {
                draw_sprite(spr_display_missions, MISSION_FLICKIES, view_xview[0] + 480 + _roff, view_yview[0] + 4);
            }
            
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mission Specific Info
var yoff;
yoff = 0;

var _roff;
_roff = obj_level_controller.hud_rightoff;

// Config Text
draw_set_halign(fa_right)
draw_set_color(c_white)
draw_set_font(global.main_font)

// Mission Info.
        // Badniks
            if (mission[MISSION_BADNIKS])
            {
                draw_sprite(spr_mission_specific_icons, 0, view_xview[0] + 460 + _roff, view_yview[0] + 29 + yoff);
                draw_text(view_xview[0] + 460 + _roff, view_yview[0] + 29 + yoff + 2, string(global.player_badniks) + "/" + string(mission_specific[MISSION_BADNIKS]))
                yoff += 22;
            }
            
        // Flickies
            if (mission[MISSION_FLICKIES])
            {
                draw_sprite(spr_mission_specific_icons, 1, view_xview[0] + 460 + _roff, view_yview[0] + 29 + yoff);
                draw_text(view_xview[0] + 460 + _roff, view_yview[0] + 29 + yoff + 2, string(global.player_flickies) + "/" + string(mission_specific[MISSION_FLICKIES]))
                yoff += 22;
            }

draw_set_halign(fa_left)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
