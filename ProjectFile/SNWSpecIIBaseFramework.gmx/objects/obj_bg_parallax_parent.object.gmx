<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constants.
    // ---- Constants declaration ------------------------------------------------
    constParallaxTileDirection      = 0;
    constParallaxBackground         = 1;
    
    constParallaxXFactor            = 2;
    constParallaxXSpeed             = 3;
    constParallaxXScroll            = 4;
    constParallaxXOffset            = 5;
    constParallaxXSeparation        = 6;
    
    constParallaxYFactor            = 7;
    constParallaxYSpeed             = 8;
    constParallaxYScroll            = 9;
    constParallaxYOffset            = 10;
    constParallaxYSeparation        = 11;
    
    constParallaxLeft               = 12;
    constParallaxTop                = 13;
    constParallaxWidth              = 14;
    constParallaxHeight             = 15;

    // ---- Parallax data --------------------------------------------------------
    NumParallaxNodes                = 0;
    ParallaxNodes                   = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DS Grids.
    var CurrentNode, xSpeed, xScroll, ySpeed, yScroll;
// -----------------------------------------------------------------------------------------------

    // Handle parallax
    for (CurrentNode = 0; CurrentNode &lt; NumParallaxNodes; CurrentNode += 1) {
        // Retrieve values
        xSpeed  = ds_grid_get(ParallaxNodes, constParallaxXSpeed, CurrentNode);
        xScroll = ds_grid_get(ParallaxNodes, constParallaxXScroll, CurrentNode);
        ySpeed  = ds_grid_get(ParallaxNodes, constParallaxYSpeed, CurrentNode);
        yScroll = ds_grid_get(ParallaxNodes, constParallaxYScroll, CurrentNode);

        // Add speed values to scroll
        ds_grid_set(ParallaxNodes, constParallaxXScroll, CurrentNode, xScroll+xSpeed);
        ds_grid_set(ParallaxNodes, constParallaxYScroll, CurrentNode, yScroll+ySpeed);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw The Background
    var CurrentNode, TileDirection, Background, xFactor, xSpeed, xScroll, xOffset, xSeparation;
    var yFactor, ySpeed, yScroll, yOffset, ySeparation, Left, Top, Width, Height, xFinal, yFinal;
// -----------------------------------------------------------------------------------------------

    // Handle parallax
    for (CurrentNode = 0; CurrentNode &lt; NumParallaxNodes; CurrentNode += 1) {
        // Retrieve values
        TileDirection = ds_grid_get(ParallaxNodes, constParallaxTileDirection, CurrentNode);
        Background    = ds_grid_get(ParallaxNodes, constParallaxBackground,    CurrentNode);
        
        xFactor       = ds_grid_get(ParallaxNodes, constParallaxXFactor,       CurrentNode);
        xSpeed        = ds_grid_get(ParallaxNodes, constParallaxXSpeed,        CurrentNode);
        xScroll       = ds_grid_get(ParallaxNodes, constParallaxXScroll,       CurrentNode);
        xOffset       = ds_grid_get(ParallaxNodes, constParallaxXOffset,       CurrentNode);
        xSeparation   = ds_grid_get(ParallaxNodes, constParallaxXSeparation,   CurrentNode);

        yFactor       = ds_grid_get(ParallaxNodes, constParallaxYFactor,       CurrentNode);
        ySpeed        = ds_grid_get(ParallaxNodes, constParallaxYSpeed,        CurrentNode);
        yScroll       = ds_grid_get(ParallaxNodes, constParallaxYScroll,       CurrentNode);
        yOffset       = ds_grid_get(ParallaxNodes, constParallaxYOffset,       CurrentNode);
        ySeparation   = ds_grid_get(ParallaxNodes, constParallaxYSeparation,   CurrentNode);
        
        Left          = ds_grid_get(ParallaxNodes, constParallaxLeft,          CurrentNode);
        Top           = ds_grid_get(ParallaxNodes, constParallaxTop,           CurrentNode);
        Width         = ds_grid_get(ParallaxNodes, constParallaxWidth,         CurrentNode);
        Height        = ds_grid_get(ParallaxNodes, constParallaxHeight,        CurrentNode);
        
        // Calculate final position
        xFinal = floor((view_xview[view_current])*xFactor+xOffset+xScroll);
        yFinal = floor((view_yview[view_current])*yFactor+yOffset+yScroll);
//      xFinal = floor((view_xview+xOffset+xScroll)*xFactor);
//      yFinal = floor((view_yview+yOffset+yScroll)*yFactor);
    
        // Draw
        switch(TileDirection) {
            case 0:
                draw_background_part(Background, Left, Top, Width, Height, xFinal, yFinal);
                break;
            case 1:
                scr_draw_background_tiled_horizontal_part(Background, Left, Top, Width, Height, xFinal, yFinal, xSeparation);
                break;
            case 2:
                scr_draw_background_tiled_vertical_part(Background, Left, Top, Width, Height, xFinal, yFinal, ySeparation);
                break;
            case 3:
                scr_draw_background_tiled_part(Background, Left, Top, Width, Height, xFinal, yFinal, xSeparation, ySeparation);
                break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
