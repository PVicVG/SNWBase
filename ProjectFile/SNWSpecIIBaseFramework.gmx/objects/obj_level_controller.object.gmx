<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_editor_hud</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999997</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    player_index = obj_player.player_index;
    
    // Move up and down. used for certain objects.
    y_start = 0;
    y = 0;
    ang_radius = 0;
    
     // Powerup bars:
    powerup_bar_x[0] = -53;   // Position of the invincibility bar. 
    powerup_bar_y[0] = 57;       
    powerup_bar_x[1] = -53    // Position of the speedshoe bar.
    powerup_bar_y[1] = 57   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bonus Rewards.
    obj_player.shield = global.player_shield;
    
    if global.returning_from_bonus == true
    {
        global.returning_from_bonus = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global timers.

 // Game time:
    if(global.game_paused == false)
    { 
       if(global.do_time &gt; 0)
       {
           global.game_time += 1000/60;
       }
    }
    
 // Object timer:
    if(global.game_paused == false)
    {
       global.object_time += 1000/60;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Infinite Lifes.
    if (global.player_lives != 3) 
    {
        global.player_lives = 3;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move up and down. 
ang_radius +=3
y = y_start+lengthdir_y(6,ang_radius)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HUD InScreen
    TweenFireTo(id, EaseOutQuad, 0, false, 0, 70, "hud_leftoff", 0);
    TweenFireTo(id, EaseOutQuad, 0, false, 0, 70, "hud_rightoff", 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hide HUD
TweenFireTo(id, EaseInQuad, 0, false, 0, 25, "hud_leftoff", -200);
TweenFireTo(id, EaseInQuad, 0, false, 0, 25, "hud_rightoff", 200);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init.    

 // Create title card:
    instance_create(0, 0, obj_title_card);
    instance_create(0, 0, obj_instance_region);
    instance_create(0, 0, obj_pause);
    
 // Offsets
    hud_leftoff = -200;
    hud_rightoff = 200;
    
    TweenFireTo(id, EaseOutQuad, 0, false, 230, 70, "hud_leftoff", 0);
    TweenFireTo(id, EaseOutQuad, 0, false, 230, 70, "hud_rightoff", 0);
    
 // Set level variables:
    if global.bonus_stage == false &amp;&amp; global.returning_from_bonus == false
    {
        global.player_rings = 0;
        global.player_badniks = 0;
        global.player_flickies = 0;
        global.do_time      = 0;
        global.game_time    = 0;
        global.object_time  = 0;
     }
     else
     {
        alarm[0]            = 10;
     }
       

    
 // HUD Pieces:
    time_visibility = 1;
    ring_visibility = 1;

 // Save progress. 
    if(global.save_selected != 0)
    {
       save_create(global.save_selected);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD.

 // Exit if paused.
    if(global.game_paused == true or instance_exists(obj_bonus_controller)) exit;
    
 // HUD for Levels
    if (room != rm_skyvillage)
    {
         // Draw HUD Bars
            draw_sprite(spr_hud_bar, 0, view_xview + hud_leftoff, view_yview+9);
            draw_sprite(spr_hud_bar, 0, view_xview + hud_leftoff, view_yview+25);
            draw_sprite(spr_hud_bar, 0, view_xview + hud_leftoff, view_yview+41);
            
         // Draw HUD Parts:
            draw_sprite(spr_hud_rings, 1, view_xview+16 + hud_leftoff, view_yview+41)
            
            draw_sprite(spr_hud, 0, view_xview + 16 + hud_leftoff, view_yview+9);
            if(time_visibility)
            {
                draw_sprite(spr_hud, 1, view_xview+16 + hud_leftoff, view_yview+25);
                if(global.game_time &lt; 600000)
                { 
                   draw_sprite(spr_time_seperator, 0, view_xview+66 + 40 + hud_leftoff, view_yview+25);
                }
                else draw_sprite(spr_time_seperator, 0, view_xview+74 + 40 + hud_leftoff, view_yview+25);
            }
            if(ring_visibility)
            {
               draw_sprite(spr_hud, 2, view_xview+16 + hud_leftoff, view_yview+41)
            }
            
         // HUD Parts visibility.
            if(((global.game_time div 8) mod 2 &amp;&amp; global.game_time &gt; 540000) || global.do_time == 0 || global.game_time &lt;= 540000 || global.game_time &gt;= 600000)
            {
                time_visibility = 1;
            }
            else time_visibility = 0;
        
            
            if((global.game_time div 8) mod 2 &amp;&amp; global.player_rings == 0 || global.do_time == 0 || global.player_rings &gt; 0 || global.game_time &gt;= 600000)
            {
                ring_visibility = 1;
            }
            else ring_visibility = 0;
        
            
         // Set font.
            draw_set_font(global.hud_font);
            draw_set_color(c_white);
        
            
         // Score Text:
            draw_set_halign(fa_right);
            draw_number_zero(view_xview+111 + hud_leftoff + 16, view_yview+9, global.player_score, 7);
            
         // Time:
            draw_set_halign(fa_left);   
            if(time_visibility)
            {
               draw_text(view_xview+55 + hud_leftoff + 40, view_yview+25, string(floor(global.game_time/60000))+" "+string_place_number(floor(global.game_time/1000) mod 60, 2, 0));
            }
        
         // Rings:
            draw_set_halign(fa_right);
            draw_number_zero(view_xview+87 + hud_leftoff + 40, view_yview+41, global.player_rings, 3);
            draw_set_halign(-1);
            
         // Power up bar.    
            if(instance_exists(obj_player))
            {
              
               // Shift invincibility bar:
                  if(obj_player.invincibility == 2)
                  { 
                     if(powerup_bar_x[0] &lt; 16)
                     {
                        powerup_bar_x[0] += floor((16-powerup_bar_x[0]))*.10;  
                     }
                  }
                  else
                  {
                     if(powerup_bar_x[0] &gt; -53)
                     {
                        powerup_bar_x[0] += floor(((-53)-powerup_bar_x[0]))*.15;  
                     }          
                  }
                  
               // Shift speedshoe bar.
                  if(obj_player.speedshoe == 1)
                  { 
                     if(powerup_bar_x[1] &lt; 16)
                     {
                        powerup_bar_x[1] += floor((16-powerup_bar_x[1]))*.10;  
                     }
                  }
                  else
                  {
                     if(powerup_bar_x[1] &gt; -53)
                     {
                        powerup_bar_x[1] += floor(((-53)-powerup_bar_x[1]))*.15;  
                     }          
                  }
                  
               // Shift speedshoe bar down.      
                  if(powerup_bar_x[0] &gt; -53 &amp;&amp; obj_player.invincibility == 2)
                  { 
                     powerup_bar_y[1] += floor(((57+18)-powerup_bar_y[1]))*0.25;  
                  }    
                  else if(obj_player.invincibility != 2 &amp;&amp; powerup_bar_y[1] != 57)
                  {
                          powerup_bar_y[1] += floor(((57)-powerup_bar_y[1]))*0.15;
                  }
                  if(powerup_bar_y[1] &lt;= 57)
                  {
                     powerup_bar_y[1] = 57;
                  }
            
                  draw_set_color(c_blue);
                  draw_rectangle(floor(view_xview+powerup_bar_x[0]+20), floor(view_yview+powerup_bar_y[0]+1), floor(view_xview+powerup_bar_x[0]+20)+(obj_player.invincibility_timer/900*(32)), floor((view_yview+powerup_bar_y[0]+1)+16), false)
                  draw_set_color(c_red);
                  draw_rectangle(floor(view_xview+powerup_bar_x[1]+20), floor(view_yview+powerup_bar_y[1]+1), floor(view_xview+powerup_bar_x[1]+20)+(obj_player.speedshoe_timer/900*(32)), floor((view_yview+powerup_bar_y[1]+1)+16), false)    
                  draw_set_color(c_white);
                  draw_sprite(spr_hud_powerup_bar, 0, floor(view_xview+powerup_bar_x[0]), floor(view_yview+powerup_bar_y[0]));
                  draw_sprite(spr_hud_powerup_bar, 1, floor(view_xview+powerup_bar_x[1]), floor(view_yview+powerup_bar_y[1]));           
                  
            }
        
    }  
    else
    {
    // HUD For LOBBY
    
        // Draw HUD Bars
            draw_sprite(spr_hud_bar, 0, view_xview + hud_leftoff, view_yview+9);
            draw_sprite(spr_hud_bar, 0, view_xview + hud_leftoff, view_yview+25);
            
        // Draw Text
            draw_sprite(spr_hud, 2, view_xview+16 + hud_leftoff, view_yview+9)
            draw_sprite(spr_hud, 3, view_xview+16 + hud_leftoff, view_yview+25)
            draw_sprite(spr_lvl_bar, (global.xp/(global.level * 100))*32, view_xview + 376 + hud_rightoff + 8, view_yview + 11)
            draw_sprite(spr_display_chaos_emeralds, min(global.player_emeralds, 7), view_xview + 480 + hud_rightoff, view_yview+26)
                      
        // Draw Values
            draw_set_font(global.hud_font);
            draw_set_color(c_white);
            
            // Rings:
                draw_set_halign(fa_right);
                draw_number_zero(view_xview+87 + hud_leftoff + 40, view_yview+9, global.player_cash, 3);
                draw_set_halign(-1);
                
            // Tokens:
                draw_set_halign(fa_right);
                draw_number_zero(view_xview+87 + hud_leftoff + 40, view_yview+25, global.player_tokens, 3);
                draw_set_halign(-1);
            
            // Level
                draw_set_halign(fa_left);
                draw_number_zero(view_xview[0] + 376 + 66 + hud_rightoff + 8, view_yview[0] + 11, string(global.level),  2)
                draw_set_halign(-1);
                
    } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
