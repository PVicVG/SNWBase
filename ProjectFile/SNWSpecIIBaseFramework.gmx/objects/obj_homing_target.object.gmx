<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_homing_target</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
 
    target       = noone;
    target_scale = 100;
    target_angle = 0;
    target_alpha = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set target flag.

    if(instance_exists(obj_player))
    {
       with(obj_player)
       {
            homing_target = noone;
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Position, Scaling and Angle.

 // Destroy.
    if(instance_exists(target) == false)
    {
       instance_destroy();
    }
    else
    {
       // Reposition:
          x = target.x;
          y = target.y;
          
       // Scale.
          if(target_scale != 1)
          {
             target_scale += floor(1-target_scale)*.5;
          }
          else if(target_scale &lt;= 1)
          {
                  target_scale = 1;
          }
          
       // Angle.
          if(target_scale == 1)
          {
             target_angle += 5;   
          }
          
       // Alpha.
          if(target_alpha != 1)
          {
             target_alpha += (1-target_alpha)*.05;
          }        
    }
    
 // Set properties.
    image_xscale = target_scale;
    image_yscale = target_scale; 
    if(visible == false)
    {
       target_scale = 100;
       target_angle = 0;
       target_alpha = 0;
    }

 // Check if there's solids between the player and the target, preventing homing into a wall.
    var (_collision_test) = instance_position(x, y, target)
    if  (_collision_test != noone)
    {
         var (_collision_id)   = object_get_name(_collision_test.object_index)
         if(string_pos("obj_monitor", _collision_id) != 0)
         {
            with(_collision_test)
            {
                 if(collision)
                 {
                    if(collision.x != -1)
                    {
                       with(collision)
                       { 
                            if(collision_line(x, y, obj_player.x, obj_player.y, par_solid, true, true))
                            {
                               with(obj_homing_target)
                               {
                                    visible = false;
                               }
                            }
                            else
                            {
                               with(obj_homing_target)
                               {
                                    visible = true;    
                               }
                            }
                       }
                    }
                    else
                    {
                       if(collision_line(x, y, obj_player.x, obj_player.y, par_solid, true, true))
                       {
                          with(other)
                          {
                               visible = false;
                          }
                       }
                       else
                       {
                          with(other)
                          {
                               visible = true;
                          }
                       }                    
                    }
                 }
            }
         }
         else if(string_pos("obj_spring", _collision_id) != 0)
         {
                 with(_collision_test)
                 {
                      if(collision_line(x, y, obj_player.x, obj_player.y, par_solid, true, true))
                      {
                         with(obj_homing_target)
                         {
                              visible = false;
                         }
                      }
                      else
                      {
                         with(obj_homing_target)
                         {
                              visible = true;    
                         }
                      }                      
                 }
         }
         else
         {
                       if(collision_line(x, y, obj_player.x, obj_player.y, par_solid, true, true))
                       {
                          with(other)
                          {
                               visible = false;
                          }
                       }
                       else
                       {
                          with(other)
                          {
                               visible = true;
                          }
                       }            
         }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw target.

    if(visible)
    {
       draw_sprite_ext(sprite_index, 0, floor(x), floor(y), image_xscale, image_yscale, image_angle, image_blend, target_alpha);
       draw_sprite_ext(sprite_index, 1, floor(x), floor(y), image_xscale, image_yscale, target_angle, image_blend, target_alpha);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
