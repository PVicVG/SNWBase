<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprUFOEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//state machine stuff, blah bla
State = 0
StateIdle = 0
StateAttack = 1
StateFlee = 2

//how fast to attack and how many times
AttackTimerMax = room_speed/2
AttackTimer = AttackTimerMax
AttackTimes = 3

respawnables_init()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do stuff depending on state
switch(State)
{
    case StateIdle: //do nothing until we get close to player
    //check if we are close enough
        if distance_to_object(obj_SS_player) &lt; 700
         {
                 TweenFireTo(id, EaseInOutQuad, 0, false, 0, 35, "x", obj_SS_player.x + 300);
         }
         
        if distance_to_object(obj_SS_player) &lt; 300
         {
             //if so, ATTACK
                 State = StateAttack
         }
        break;
        
        case StateAttack:
    //could definitely apply a tween here to smooth the movement
        if x &lt; obj_SS_player.x + 298
        {
            x = obj_SS_player.x + 300
        }
    //countdown until next shot is fired
        AttackTimer -= 1
    //fire when ready
        if AttackTimer &lt;= 0 &amp;&amp; AttackTimes &gt;= 1
         {
             P = instance_create(x,y,obj_SS_enemy_shot)
             P.direction = point_direction(x,y,obj_SS_player.x + random(128), choose(obj_SS_player.y, random(room_height)))
             P.speed = choose(2,3,4,5);
             AttackTimes -= 1
             AttackTimer = AttackTimerMax
         }
    //move to next state once we fire all shots
        if AttackTimes &lt;= 0 { State = StateFlee }
        break;
        
        case StateFlee: 
    //move out of sight, again, another tween to move me out of view would work great here
        hspeed = 13
    
    //prep to destroy ourselves to save space
        if x &gt; room_width || x &gt; obj_SS_player.x + 600
        {
        instance_destroy()
        }
    
    //done
      break;
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
