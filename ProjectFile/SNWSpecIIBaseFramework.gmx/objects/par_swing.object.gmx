<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_platform_no_angle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    chain_size = sprite_get_height(chain_sprite);
    angle_val  = 270;
    angle_mov  = angle_val; 
    _x         = x;
    _y         = y-(chain_size*chains);
    angle_spd  = swing_speed;
    x_previous = x;
    x_relative = x;
    y_relative = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swing &amp; Handle player.

 // Temp variables:
    var player_main, i, var_cos, var_sin;
    
 // Set previous x position:
    x_previous = x;

//  Set Cos/Sin:
    var_cos = (cos(degtorad(angle_mov))*chain_size);
    var_sin = (sin(degtorad(angle_mov))*chain_size);

//  Set the X/Y Position:
    x = floor(x_relative+var_cos); 
    y = floor(y_relative-var_sin); 

 // Update player position.
    _main_char = obj_player;
    _cpu_char  = obj_ai;
    
    if(instance_exists(_main_char))
    {
       if(_main_char.ground == true &amp;&amp; _main_char.swing_id == id &amp;&amp; _main_char.state != STATE_DEATH)
       {
          _main_char.x += (x-x_previous);
          _main_char.y  = ((y-sprite_yoffset)-platform_offset);
       }
    }
    if(instance_exists(_cpu_char))
    {
       if(_cpu_char.ground == true &amp;&amp; _cpu_char.swing_id == id)
       {
          _cpu_char.x += (x-x_previous);
          _cpu_char.y  = ((y-sprite_yoffset)-platform_offset);
       }
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swing Movement.

    var temp;
    temp = angle_mov + angle_spd;
    angle_mov = wrap_angle(temp);

    if(angle_mov &gt; angle_val)
    {
       angle_spd -= 0.051; 
    }
    if(angle_mov &lt; angle_val)
    {
       angle_spd += 0.051; 
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Chains and platform.

    draw_sprite(chain_sprite_top, 0, _x, _y);
    x_relative = _x;
    y_relative = _y;
    repeat(chains-1)
    {
           x_relative = x_relative+(cos(degtorad(angle_mov))*chain_size);
           y_relative = y_relative-(sin(degtorad(angle_mov))*chain_size);    
           draw_sprite(chain_sprite, 0, floor(x_relative), floor(y_relative));   
    }

// Draw Platform:
   draw_sprite(sprite_index, 0, floor(x), floor(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
