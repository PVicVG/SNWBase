<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collapse_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_collision_collapse</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    tile_ox     = 2;
    tile_oy     = 5;
    tile_size   = 16;
    tile_width  = (sprite_width  div tile_size);
    tile_height = (sprite_height div tile_size);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Collapsing tiles.

 // Variables.
    var tile_ox, tile_oy, tile_width, tile_height, tile_size;
        tile_ox     = 2;
        tile_oy     = 5;
        tile_size   = 16;
        tile_width  = (sprite_width  div tile_size);
        tile_height = (sprite_height div tile_size);
        
    var tile_int, tile_w, tile_h;
        tile_int = 0;
        
 // Create tiles:
    for(tile_h = 0; tile_h &lt; tile_height; tile_h+=1)
    {
        for(tile_w = 0; tile_w &lt; tile_width; tile_w+=1)
        {
            with(instance_create(x+tile_w*16, y+tile_h*16, obj_collapse_pieces_test))
            {
                 image_speed = 0;
                 image_index = tile_h*tile_width+tile_w;
                 tile_int    = tile_h*tile_width+tile_w;
                 mask_index  = spr_collapse_pieces_test;
                 if(image_xscale &gt; 0)
                 {
                    alarm[0] = ((tile_width-tile_w)*other.tile_ox)+(((tile_height-tile_h)-1)*other.tile_oy);
                 }
                 else
                 {
                    alarm[0] = (tile_w*other.tile_ox)+(((tile_height-tile_h)-1)*other.tile_oy);  
                 }
            }
        }
    }
    aud_play_sound(general_crumble, global.sfx_volume, 1, 0, 0);
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
