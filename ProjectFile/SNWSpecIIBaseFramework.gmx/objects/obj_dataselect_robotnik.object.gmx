<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dataselect_robotnik_delete</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

    active      = false;
    sprite      = sprite_index;
    state       = "idle"
    sign_index  = 0;
    image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Everything.

 // Movement.
    if(active == true)
    {
       if(obj_dataselect_cursor.datacursor_sprite != spr_dataselect_cursor_small)
       {
          x = approach(x, obj_dataselect_cursor.x+12, 8)
       }
       else
       {
          x = approach(x, obj_dataselect_cursor.x+10, 8)       
       }
    }
    else if(active == false)
    {
       x = approach(x, xstart, 8)      
    }
    
 // Change animation.
    if(state == "idle" &amp;&amp; active == false)
    {
       sprite_index = spr_dataselect_robotnik_delete;
       image_speed  = 0;
    }
    if(state == "idle" &amp;&amp; active == true)
    {
       sprite_index = spr_dataselect_robotnik_full_spin;
       image_speed  = 0.25;
    }    
    if(state == "spin")
    {
       sprite_index = spr_dataselect_robotnik_spin
       image_speed  = 0.25;
    }
    if(state == "selection")
    {
       sprite_index = spr_dataselect_robotnik_selection;
       image_speed  = 0.05;
    }
    
 // Deactivate on delete slot.
    if(active == true &amp;&amp; obj_dataselect_cursor.datacursor_slot_index == 9)
    {
       if(keyboard_check_pressed(global.key_action))
       {
          active     = false;
          sign_index = 0;
          state      = "idle";
          obj_dataselect_cursor.datacursor_allow_movement = true;             
          exit;
       }
    }   
        
 // Trigger 
    if(keyboard_check_pressed(global.key_action) &amp;&amp; obj_dataselect_cursor.datacursor_slot_index == 9 &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0)
    {
       if(active == false)
       {      
          active     = true;
          state      = "idle";          
       }
       exit;
    }
    
 // Delete &amp; Deactivate.
    if(active == true &amp;&amp; obj_dataselect_cursor.datacursor_direction == 0 &amp;&amp; obj_dataselect_cursor.datacursor_slot_index != 0 &amp;&amp; obj_dataselect_cursor.datacursor_slot_index != 9)
    {
       // Trigger selection.
          if(state == "idle")
          {
             if(keyboard_check_pressed(global.key_action))
             {
                with(obj_dataselect_slot)
                {  
                     if(dataslot_index == global.save_selected)
                     {
                        if(dataslot_zone == 0)
                        {
                           with(other)
                           {
                                active      = false;
                                sign_index  = 1;
                                image_index = 0;
                                state       = "spin";
                                obj_dataselect_cursor.datacursor_allow_movement = true;
                                aud_play_sound(general_error, global.sfx_volume, 1, 0, 0);
                                exit;                             
                           }
                        }
                        else
                        {
                           with(other)
                           {
                                sign_index = 0;
                                state      = "spin";
                                image_index = 0;                                
                                obj_dataselect_cursor.datacursor_allow_movement = false;
                                exit;       
                           }                 
                        }
                     }
                }
             }
          }
       // Delete Slot.
          if(state == "selection")
          {
             if(keyboard_check_pressed(global.key_left))
             {
                with(obj_dataselect_slot)
                {  
                     if(dataslot_index == global.save_selected)
                     {
                        alarm[0] = 1;
                     }
                }   
                active     = false;
                sign_index = 1;
                state      = "spin";
                obj_dataselect_cursor.datacursor_allow_movement = true;
                aud_play_sound(general_signpost, global.sfx_volume, 1, 0, 0);
                exit;                
             }          
          }    
       // Backout.
          if(state == "selection")
          {
             if(keyboard_check_pressed(global.key_right) || keyboard_check_pressed(global.key_special))
             {  
                 sign_index = 1;
                 state      = "spin";
                 obj_dataselect_cursor.datacursor_allow_movement = true;
                 exit;
             }
          }                  
    }
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch sign.
 
    if(state == "spin")
    {
       if(sign_index == 0)
       {
          sign_index = 1;
          state      = "selection";
          exit;
       }
       else
       {
          sign_index = 0;
          state      = "idle";
          exit;
       }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
