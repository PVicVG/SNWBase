<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>obj_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.
  
    game_paused   = false;
    image_speed   = 0.2;
    game_snapshot = noone;
    pause_timer = -1;
    pause_alpha = 0;
    pause_offset = 500;
    temp_control_lock = false;
    
// Option
    event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Pausing
     // Lock Player
            if (game_paused)
            {
                // Check if the player's control lock has been updated.
                    if temp_control_lock = true &amp;&amp; obj_player.control_lock == false
                    {
                        temp_control_lock = false;
                    }
                
                // Lock him.
                    with (obj_player)
                            {
                                    control_lock = true;
                                    player_inputs_null();
                            }
            } 
    
     // Exit if time is not running.
            if(global.do_time == false) exit;
        
     // Pause:
            if(game_paused == false &amp;&amp; keyboard_check_pressed(global.key_enter) &amp;&amp; pause_timer == -1)
            {
                // Play Sounds
                   aud_play_simple(menu_woosh); 
               // Mission Controller
                    if instance_exists(obj_mission_controller)
                    {
                        with obj_mission_controller
                        {
                            event_user(0)
                        }
                    }
               // Set Variables
                   game_paused   = true;
                   pause_timer = 20;
                   event_user(0);
               
               // Tween Alpha and Offset
                   TweenFireTo(id, EaseInOutQuad, 0, false, 0, 20, "pause_alpha", 0.8);
                   TweenFireTo(id, EaseInOutQuad, 0, false, 0, 20, "pause_offset", 0);
               
               // Check the player's current locking state.
                   if instance_exists(obj_player)
                   {
                        temp_control_lock = obj_player.control_lock;
                   }
            }
               
    // Pause Timer
        if pause_timer &gt; -1
        {
            pause_timer -= 1;
        }
        
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Options
if (game_paused)
{
    // Scroll Down
            if keyboard_check_pressed(global.key_down)
            {
                // Play Sound
                    aud_play_simple(menu_bleep)
                
                // Current Option is not Highlighted anymore.
                    update_option(current_option + 1)
                
                // Release key
                    keyboard_clear(global.key_down)
            }
        
    // Scroll Up
            if keyboard_check_pressed(global.key_up)
            {
                // Play Sound
                    aud_play_simple(menu_bleep)
                
                // Current Option is not Highlighted anymore.
                    update_option(current_option - 1)
                    
                // Release key
                    keyboard_clear(global.key_up)
            }

    // Option Max and Min
        // Go to the bottom
            if (current_option &lt; 1) 
            {
                update_option(option_max);
            }
        
        // Go to the top
            if (current_option &gt; option_max)
            {
                update_option(1);
            }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Press Options/ Unpause
     // UnPause   
            if (game_paused == true &amp;&amp; keyboard_check_pressed(global.key_enter) &amp;&amp; pause_timer == -1)
            {
                if (current_menu = 1)
                {
                    // Options
                                
                    
                                // Set Checkpoint X and Y
                                if current_option != 1
                                {
                                    global.checkpoint_x = -1;
                                    global.checkpoint_y = -1;
                                    global.bonus_stage = false;
                                    global.returning_from_bonus = false;
                                    global.player_shield = 0;
                                }
                    
                                // Restart
                                if current_option = 2
                                {
                                    with(instance_create(0, 0, obj_fade_to_value))
                                           {
                                                value = room;
                                           }
                                }
                                
                                // Exit Act
                                if current_option = 3
                                {
                                    with(instance_create(0, 0, obj_fade_to_value))
                                           {
                                                value = rm_skyvillage;
                                           }
                                }
                                
                                // Quit
                                if (current_option = 4)
                                {
                                    with(instance_create(0, 0, obj_fade_to_value))
                                           {
                                                value = rm_options;
                                           }
                                }
                                
                                // Play Sound
                                   aud_play_simple(menu_accept); 
                               
                               // Set Flags
                                   game_paused = false;
                                   pause_timer = 20;
                               
                               // Tween Back to out of room and transparent
                                   TweenFireTo(id, EaseInOutQuad, 0, false, 0, 20, "pause_alpha", 0);
                                   TweenFireTo(id, EaseInOutQuad, 0, false, 0, 20, "pause_offset", 500);
                
                                // Revert player to their previous control lock state               
                                   if instance_exists(obj_player)
                                   {
                                        obj_player.control_lock = temp_control_lock;
                                   }
                        
                }
            }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance activation.

    instance_activate_object(obj_gamepad_controller);
    instance_activate_object(obj_screen_controller);
    instance_activate_object(obj_audio);
    instance_activate_object(obj_SharedTweener);    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Default Option Menu Values
    current_option = 1;
    current_menu = 1;
    option_max = 4;
    
    option_highlighted[1] = true;
    option_highlighted[2] = false;
    option_highlighted[3] = false;
    option_highlighted[4] = false;
    
    option_highlighted[0] = false;
    option_highlighted[5] = false;
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Pause Menu
 
 // Black
    draw_sprite_ext(spr_dot, -1, view_xview[0], view_yview[0], 480, 270, 0, c_black, pause_alpha);
 
 // Frame
    draw_sprite_ext(spr_pause_menu_back, image_index, view_xview[0] + pause_offset, view_yview[0], 1, 1, 0, c_white, 1)
    
 // Pause Options
    draw_set_font(global.title_card)
    
    if current_menu == 1
    {
    draw_option(1, "RESUME") 
    draw_option(2, "RESTART")
    draw_option(3, "EXIT ACT")
    draw_option(4, "QUIT")
    }

 // Frame
    draw_sprite_ext(spr_pause_menu, image_index, view_xview[0] + pause_offset, view_yview[0], 1, 1, 0, c_white, 1)

 // Text
    draw_set_halign(fa_left)
    draw_text(view_xview[0] + pause_offset + 20, view_yview[0] + 18, "PAUSED");
    
 // Missions.
    if instance_exists(obj_mission_controller)
    {
    draw_set_font(global.main_font)
    draw_text(view_xview[0] + pause_offset + 20, view_yview[0] + 54, obj_mission_controller.mission_total);
    }
     
 // Trivia   
 draw_set_font(global.small_font)
    draw_text(view_xview[0] + pause_offset + 7, view_yview[0] + 200, global.zone_trivia);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
